/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,14],$V3=[1,20],$V4=[1,22],$V5=[1,21],$V6=[1,19],$V7=[1,24],$V8=[1,26],$V9=[1,27],$Va=[1,25],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[2,5,18,20,25,26,32,47,51,54,55,56,57,59,62,65,67,68,73],$Vg=[2,51],$Vh=[1,40],$Vi=[1,44],$Vj=[1,48],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,69],$Vo=[1,68],$Vp=[1,74],$Vq=[1,64],$Vr=[1,61],$Vs=[1,60],$Vt=[1,62],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,75],$Vy=[30,41],$Vz=[2,5,18,20,25,26,32,47,51,53,54,55,56,57,59,62,65,67,68,73],$VA=[1,104],$VB=[1,105],$VC=[1,98],$VD=[1,99],$VE=[1,100],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,106],$VJ=[1,107],$VK=[1,108],$VL=[1,109],$VM=[1,110],$VN=[1,111],$VO=[1,112],$VP=[1,113],$VQ=[1,114],$VR=[19,27,42,43,44,50,71,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89],$VS=[19,27,41,42,43,44,50,71,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,96],$VT=[1,128],$VU=[42,50,71],$VV=[1,136],$VW=[1,130],$VX=[1,131],$VY=[1,132],$VZ=[1,133],$V_=[1,134],$V$=[1,135],$V01=[2,5,18,20,25,26,32,36,41,47,48,51,54,55,56,57,59,62,65,67,68,73,74,75,80,91,92,93,102],$V11=[26,36,41,48,74,75,80,91,92,93,102],$V21=[1,151],$V31=[19,30],$V41=[2,46],$V51=[1,192],$V61=[19,30,41,50,56,71],$V71=[1,200],$V81=[2,86],$V91=[50,71],$Va1=[19,27,42,43,44,50,71,74,75,81,82,83,84,85,86,87,88,89],$Vb1=[19,27,42,43,44,50,71,74,75,76,77,78,81,82,83,84,85,86,87,88,89],$Vc1=[19,27,42,43,44,50,71,81,82,83,84,85,86,87,88,89],$Vd1=[19,27,42,43,44,50,71,85,86,87,88,89],$Ve1=[19,30,41,50,71],$Vf1=[1,233],$Vg1=[1,234],$Vh1=[1,236],$Vi1=[57,65,67],$Vj1=[1,283],$Vk1=[2,82],$Vl1=[2,25,26,32,47,51,54,55,56,57,59,62,68,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"InstruccionesF":7,"InstruccionF":8,"Imprimir":9,"Declaracion":10,"Asignacion":11,"NTIf":12,"Cuerpo":13,"NTWhile":14,"NTDoWhile":15,"NTFor":16,"NTSwitch":17,"BREAK":18,"PUNTOYCOMA":19,"CONTINUE":20,"NTFuncion":21,"NTCall":22,"NTReturn":23,"Recuperar":24,"LET":25,"ID":26,"DOSPUNTOS":27,"Tipo":28,"Dimensiones":29,"IGUAL":30,"Expresion":31,"CONST":32,"TNUMBER":33,"TSTRING":34,"TBOOLEAN":35,"NULL":36,"TTYPE":37,"TVOID":38,"NumeroDim":39,"Dim":40,"CORIZQ":41,"CORDER":42,"INC":43,"DEC":44,"AccesosA":45,"AccesoA":46,"CONSOLELOG":47,"PARIZQ":48,"ListaExp":49,"PARDER":50,"TIF":51,"NTElse":52,"TELSE":53,"TWHILE":54,"TDO":55,"LLAVEIZQ":56,"LLAVEDER":57,"CuerpoFuncion":58,"TFOR":59,"AorD":60,"AsignacionFor":61,"TSWITCH":62,"Cases":63,"Caso":64,"TCASE":65,"Case2":66,"TDEFAULT":67,"TFUNCTION":68,"TipoFuncion":69,"Parametros":70,"COMA":71,"Param":72,"TRETURN":73,"MAS":74,"MENOS":75,"POR":76,"DIV":77,"MOD":78,"POT":79,"NOT":80,"MAYORQUE":81,"MENORQUE":82,"MAYORIGUAL":83,"MENORIGUAL":84,"IGUALIGUAL":85,"DESIGUAL":86,"AND":87,"OR":88,"INTER":89,"F":90,"NUMBER":91,"STRING":92,"BOOLEAN":93,"Accesos":94,"valorArray":95,"PUNTO":96,"Acceso":97,"CHARAT":98,"TOLOWERCASE":99,"TOUPPERCASE":100,"CONCAT":101,"TNEW":102,"TARRAY":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"BREAK",19:"PUNTOYCOMA",20:"CONTINUE",25:"LET",26:"ID",27:"DOSPUNTOS",30:"IGUAL",32:"CONST",33:"TNUMBER",34:"TSTRING",35:"TBOOLEAN",36:"NULL",37:"TTYPE",38:"TVOID",41:"CORIZQ",42:"CORDER",43:"INC",44:"DEC",47:"CONSOLELOG",48:"PARIZQ",50:"PARDER",51:"TIF",53:"TELSE",54:"TWHILE",55:"TDO",56:"LLAVEIZQ",57:"LLAVEDER",59:"TFOR",62:"TSWITCH",65:"TCASE",67:"TDEFAULT",68:"TFUNCTION",71:"COMA",73:"TRETURN",74:"MAS",75:"MENOS",76:"POR",77:"DIV",78:"MOD",79:"POT",80:"NOT",81:"MAYORQUE",82:"MENORQUE",83:"MAYORIGUAL",84:"MENORIGUAL",85:"IGUALIGUAL",86:"DESIGUAL",87:"AND",88:"OR",89:"INTER",91:"NUMBER",92:"STRING",93:"BOOLEAN",96:"PUNTO",98:"CHARAT",99:"TOLOWERCASE",100:"TOUPPERCASE",101:"CONCAT",102:"TNEW",103:"TARRAY"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[10,8],[10,6],[10,8],[10,6],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[29,1],[29,0],[39,2],[39,1],[40,2],[24,1],[24,0],[11,4],[11,3],[11,3],[11,4],[45,4],[45,1],[46,4],[9,5],[12,6],[52,2],[52,2],[52,0],[14,5],[15,7],[13,3],[13,2],[58,3],[58,2],[16,8],[60,1],[60,1],[61,3],[61,2],[61,2],[17,7],[63,2],[63,1],[64,4],[64,3],[66,1],[66,0],[21,6],[21,7],[69,2],[69,0],[22,3],[22,4],[70,3],[70,1],[72,4],[72,1],[23,2],[23,1],[49,3],[49,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,2],[31,2],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,5],[31,1],[90,3],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[94,3],[94,1],[94,4],[94,6],[94,5],[94,5],[94,6],[97,3],[97,3],[97,4],[97,6],[97,6],[97,5],[97,5],[97,5],[97,5],[97,6],[97,6],[95,3],[95,2],[95,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 4: case 77:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 5: case 57: case 78: case 90: case 96:

        this.$ = [$$[$0]];
    
break;
case 6: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 17: case 21: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 44: case 45: case 48: case 61: case 62: case 81: case 85: case 117: case 124: case 125: case 126: case 128:

        this.$ = $$[$0];
    
break;
case 7: case 22:

        this.$ = $$[$0];
    
    
break;
case 15:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 16:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 18: case 19: case 31: case 32:

        this.$ = $$[$0-1];
    
break;
case 20: case 33:
 
        errores.push(new Error_(_$[$0-1].first_line, _$[$0-1].first_column, "Sint√°ctico", "Se esperaba: "+ yytext));
    
break;
case 34:

        let dim1 = $$[$0-3];
        let declaracion1 = new Declaracion($$[$0-6], { tipo: $$[$0-4], dim: dim1 }, $$[$0-1], 1, _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = declaracion1;
    
break;
case 35:

        let dim2 = $$[$0-1];
        let declaracion2 = new Declaracion($$[$0-4], { tipo: $$[$0-2], dim: dim2 }, null, 1, _$[$0-5].first_line, _$[$0-5].first_column);
        this.$ = declaracion2;
    
break;
case 36:

        let dim3 = $$[$0-3];
        let declaracion3 = new Declaracion($$[$0-6], { tipo: $$[$0-4], dim: dim3 }, $$[$0-1], 2, _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = declaracion3;
    
break;
case 37:

        let dim4 = $$[$0-1];
        let declaracion4 = new Declaracion($$[$0-4], { tipo: $$[$0-2], dim: dim4 }, null, 2, _$[$0-5].first_line, _$[$0-5].first_column);
        this.$ = declaracion4;
    
break;
case 38: case 46:

        this.$ = 0;
    
break;
case 39: case 49:

        this.$ = 1;
    
break;
case 40:

        this.$ = 2;
    
break;
case 41:

        this.$ = 3;
    
break;
case 42:

        this.$ = 5;
    
break;
case 43: case 86:

        this.$ = 6;
    
break;
case 47:

        this.$ = $$[$0-1] + $$[$0];
    
break;
case 52:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 53:

        this.$ = new Asignacion($$[$0-2], new Unario( 
            new Variable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column),
             tipoUnario.INC, _$[$0-2].first_line,_$[$0-2].first_column), _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 54:

        this.$ = new Asignacion($$[$0-2], new Unario( 
            new Variable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column),
             tipoUnario.DEC, _$[$0-2].first_line,_$[$0-2].first_column), _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 55:

        this.$ = new AsignarAcceso($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 56:

        $$[$0-3].push({id: '', indice: $$[$0-1], tipo: 4});
        this.$ = $$[$0-3];
    
break;
case 58:

        this.$ = {id: $$[$0-3], indice: $$[$0-1], tipo: 4}
    
break;
case 59:

        this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 60:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 63:

        this.$ = null;
    
break;
case 64:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 65:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 66: case 68:

        this.$ = new Cuerpo($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 67: case 69:

        this.$ = new Cuerpo(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 70:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 73:

        this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 74:

        this.$ = new Asignacion($$[$0-1], new Unario( 
            new Variable($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),
             tipoUnario.INC, _$[$0-1].first_line,_$[$0-1].first_column), _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 75:

        this.$ = new Asignacion($$[$0-1], new Unario( 
            new Variable($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),
             tipoUnario.DEC, _$[$0-1].first_line,_$[$0-1].first_column), _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 76:

        this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 79:

        this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, tipoCase.CASE);
    
break;
case 80:

        this.$ = new Case(new Literal(0, _$[$0-2].first_line, _$[$0-2].first_column, 0), $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, tipoCase.DEFAULT);
    
break;
case 82:

        this.$ = new Array();
    
break;
case 83:

        this.$ = new Funcion($$[$0-4], $$[$0], new Array(), $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 84:

        this.$ = new Funcion($$[$0-5], $$[$0], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 87:

        this.$ = new Call($$[$0-2], new Array(), _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 88:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 89: case 95:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 91:

        let dimPar = $$[$0];
        let param = new Parametro($$[$0-3], {tipo: $$[$0-1], dim: dimPar});
        this.$ = param;
    
break;
case 92:

        this.$ = new Parametro($$[$0], 9);
    
break;
case 93:

        this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 94:

        this.$ = new Return(new Literal(0, _$[$0].first_line, _$[$0].first_column, 6), _$[$0].first_line, _$[$0].first_column);
    
break;
case 97:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.MAS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 98:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.MENOS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 99:
 
        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.POR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 100:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 101:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 102:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 103:

        this.$ = new Unario($$[$0], tipoUnario.UMENOS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 104:

        this.$ = new Unario($$[$0], tipoUnario.UMAS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 105:

        this.$ = new Unario($$[$0-1], tipoUnario.INC, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 106:

        this.$ = new Unario($$[$0-1], tipoUnario.DEC, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 107:

        this.$ = new Unario($$[$0], tipoUnario.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 108:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.MAYORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 109:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.MENORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 110:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.MAYORIGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 111:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.MENORIGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 112:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.IGUALIGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 113:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.DESIGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 114:

        this.$ = new Logica($$[$0-2], $$[$0], tipoLogica.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 115:

        this.$ = new Logica($$[$0-2], $$[$0], tipoLogica.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 116:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 118:
 
        this.$ = $$[$0-1];
    
break;
case 119:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 120:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 121:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 122:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 123:

        this.$ = new Variable($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 127:

        this.$ = new NativaString(null, $$[$0], $$[$0-2], 4, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 129:
 
       this.$ = new AccesoArray(null, $$[$0-1], $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 130:

        this.$ = new NativaString(null, $$[$0-1], $$[$0-5], 0, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 131:

        this.$ = new NativaString(null, null, $$[$0-4], 1, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 132:

        this.$ = new NativaString(null, null, $$[$0-4], 2, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 133:

        this.$ = new NativaString(null, $$[$0-1], $$[$0-5], 3, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 134:

        this.$ = new NativaString(new Variable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column), $$[$0], null, 4, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 135:

        this.$ = new NativaString(new Literal($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, 1), $$[$0], null, 4, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 136:
 
       this.$ = new AccesoArray($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 137:

        this.$ = new NativaString(new Variable($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column), $$[$0-1], null, 0, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 138:

        this.$ = new NativaString(new Literal($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column, 1), $$[$0-1], null, 0, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 139:

        this.$ = new NativaString(new Variable($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), null, null, 1, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 140:

        this.$ = new NativaString(new Literal($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column, 1), null, null, 1, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 141:

        this.$ = new NativaString(new Variable($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), null, null, 2, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 142:

        this.$ = new NativaString(new Literal($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column, 1), null, null, 2, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 143:

        this.$ = new NativaString(new Variable($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column), $$[$0-1], null, 3, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 144:

        this.$ = new NativaString(new Literal($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column, 1), $$[$0-1], null, 3, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 145:

        this.$ = new valorArray($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 146:

        this.$ = new valorArray(new Array(), null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 147:

        this.$ = new valorArray(new Array(), $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:$V1,20:$V2,21:15,22:16,23:17,25:$V3,26:$V4,32:$V5,45:23,46:32,47:$V6,51:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,62:$Vc,68:$Vd,73:$Ve},{1:[3]},{2:$V0,5:[1,33],6:34,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:$V1,20:$V2,21:15,22:16,23:17,25:$V3,26:$V4,32:$V5,45:23,46:32,47:$V6,51:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,62:$Vc,68:$Vd,73:$Ve},o($Vf,[2,3]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),{19:[1,35]},{19:[1,36]},o($Vf,[2,17]),{19:[1,37]},{19:[1,38]},o($Vf,$Vg,{24:39,19:$Vh}),{48:[1,41]},{26:[1,42]},{26:[1,43]},{30:$Vi,41:$Vj,43:$Vk,44:$Vl,48:$Vm},{30:[1,49],41:[1,50]},{48:[1,51]},{2:$V0,4:52,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:$V1,20:$V2,21:15,22:16,23:17,25:$V3,26:$V4,32:$V5,45:23,46:32,47:$V6,51:$V7,54:$V8,55:$V9,56:$Va,57:[1,53],59:$Vb,62:$Vc,68:$Vd,73:$Ve},{48:[1,54]},{13:55,56:$Va},{48:[1,56]},{48:[1,57]},{26:[1,58]},{19:[2,94],22:70,26:$Vn,31:59,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($Vy,[2,57]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,50]),{22:70,26:$Vn,31:77,36:$Vo,41:$Vp,48:$Vq,49:76,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{27:[1,78]},{27:[1,79]},{22:70,26:$Vn,31:80,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{19:[1,81]},{19:[1,82]},{22:70,26:$Vn,31:77,36:$Vo,41:$Vp,48:$Vq,49:84,50:[1,83],74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:85,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:86,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:87,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:88,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{2:$V0,6:34,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:$V1,20:$V2,21:15,22:16,23:17,25:$V3,26:$V4,32:$V5,45:23,46:32,47:$V6,51:$V7,54:$V8,55:$V9,56:$Va,57:[1,89],59:$Vb,62:$Vc,68:$Vd,73:$Ve},o($Vz,[2,67]),{22:70,26:$Vn,31:90,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{54:[1,91]},{10:93,11:94,25:$V3,26:[1,95],32:$V5,45:23,46:32,60:92},{22:70,26:$Vn,31:96,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{48:[1,97]},{19:[2,93],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{22:70,26:$Vn,31:115,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:116,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:117,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($VR,[2,117]),{22:70,26:$Vn,31:118,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($VR,[2,119]),o($VR,[2,120],{96:[1,119]}),o($VR,[2,121]),o($VR,[2,122]),o($VR,[2,123],{41:[1,121],48:$Vm,96:[1,120]}),o($VR,[2,124]),o($VR,[2,125],{41:[1,123],96:[1,122]}),o($VR,[2,126]),o($VS,[2,128]),{22:70,26:$Vn,31:77,36:$Vo,41:$Vp,42:[1,125],48:$Vq,49:124,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{103:[1,126]},{50:[1,127],71:$VT},o($VU,[2,96],{43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ}),{26:$VV,28:129,33:$VW,34:$VX,35:$VY,36:$VZ,37:$V_,38:$V$},{26:$VV,28:137,33:$VW,34:$VX,35:$VY,36:$VZ,37:$V_,38:$V$},{19:[1,138],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($V01,[2,53]),o($V01,[2,54]),o($VR,[2,87]),{50:[1,139],71:$VT},{42:[1,140],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{19:[1,141],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{42:[1,142],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{43:$VA,44:$VB,50:[1,143],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($Vz,[2,66]),{43:$VA,44:$VB,50:[1,144],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{48:[1,145]},{22:70,26:$Vn,31:146,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($V11,[2,71]),o($V11,[2,72]),{30:$Vi,41:$Vj,43:$Vk,44:$Vl},{43:$VA,44:$VB,50:[1,147],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{26:$V21,50:[1,148],70:149,72:150},{22:70,26:$Vn,31:152,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:153,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:154,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:155,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:156,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:157,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($VR,[2,105]),o($VR,[2,106]),{22:70,26:$Vn,31:158,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:159,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:160,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:161,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:162,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:163,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:164,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:165,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:166,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($VR,[2,103]),o($VR,[2,104]),o($VR,[2,107]),{43:$VA,44:$VB,50:[1,167],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{26:[1,168],98:[1,169],99:[1,170],100:[1,171],101:[1,172]},{26:[1,173],98:[1,174],99:[1,175],100:[1,176],101:[1,177]},{22:70,26:$Vn,31:178,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{26:[1,179],98:[1,180],99:[1,181],100:[1,182],101:[1,183]},{22:70,26:$Vn,31:184,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{42:[1,185],71:$VT},o($VR,[2,146]),{48:[1,186]},{19:[1,187]},{22:70,26:$Vn,31:188,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($V31,$V41,{29:189,39:190,40:191,41:$V51}),o($V61,[2,38]),o($V61,[2,39]),o($V61,[2,40]),o($V61,[2,41]),o($V61,[2,42]),o($V61,[2,43]),o($V61,[2,44]),o($V31,$V41,{39:190,40:191,29:193,41:$V51}),o($V01,[2,52]),o($VR,[2,88]),o($Vy,[2,58]),o($V01,[2,55]),o($Vy,[2,56]),{13:194,56:$Va},{13:195,56:$Va},{22:70,26:$Vn,31:196,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{19:[1,197],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{56:[1,198]},{27:$V71,56:$V81,69:199},{50:[1,201],71:[1,202]},o($V91,[2,90]),o($V91,[2,92],{27:[1,203]}),o($Va1,[2,97],{76:$VE,77:$VF,78:$VG,79:$VH}),o($Va1,[2,98],{76:$VE,77:$VF,78:$VG,79:$VH}),o($Vb1,[2,99],{79:$VH}),o($Vb1,[2,100],{79:$VH}),o($Vb1,[2,101],{79:$VH}),o($Vb1,[2,102],{79:$VH}),o($Vc1,[2,108],{74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vc1,[2,109],{74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vc1,[2,110],{74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vc1,[2,111],{74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vd1,[2,112],{74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL}),o($Vd1,[2,113],{74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL}),o([19,27,42,43,44,50,71,87,88],[2,114],{74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,89:$VQ}),o([19,27,42,43,44,50,71,88],[2,115],{74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,89:$VQ}),{27:[1,204],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($VR,[2,118]),o($VS,[2,135]),{48:[1,205]},{48:[1,206]},{48:[1,207]},{48:[1,208]},o($VS,[2,134]),{48:[1,209]},{48:[1,210]},{48:[1,211]},{48:[1,212]},{42:[1,213],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($VS,[2,127]),{48:[1,214]},{48:[1,215]},{48:[1,216]},{48:[1,217]},{42:[1,218],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($VR,[2,145]),{22:70,26:$Vn,31:219,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($Vf,[2,59]),o($VU,[2,95],{43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ}),{19:[1,221],30:[1,220]},o([19,30,50,71],[2,45],{40:222,41:$V51}),o($Ve1,[2,48]),{42:[1,223]},{19:[1,225],30:[1,224]},o($Vf,[2,63],{52:226,53:[1,227]}),o($Vf,[2,64]),{43:$VA,44:$VB,50:[1,228],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{26:[1,230],61:229},{63:231,64:232,65:$Vf1,67:$Vg1},{56:$Vh1,58:235},{26:$VV,28:237,33:$VW,34:$VX,35:$VY,36:$VZ,37:$V_,38:$V$},{27:$V71,56:$V81,69:238},{26:$V21,72:239},{26:$VV,28:240,33:$VW,34:$VX,35:$VY,36:$VZ,37:$V_,38:$V$},{22:70,26:$Vn,31:241,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:242,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{50:[1,243]},{50:[1,244]},{22:70,26:$Vn,31:245,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{22:70,26:$Vn,31:246,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{50:[1,247]},{50:[1,248]},{22:70,26:$Vn,31:249,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($VS,[2,136]),{22:70,26:$Vn,31:250,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{50:[1,251]},{50:[1,252]},{22:70,26:$Vn,31:253,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($VS,[2,129]),{43:$VA,44:$VB,50:[1,254],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{22:70,26:$Vn,31:255,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($V01,[2,35]),o($Ve1,[2,47]),o($Ve1,[2,49]),{22:70,26:$Vn,31:256,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},o($V01,[2,37]),o($Vf,[2,60]),{12:258,13:257,51:$V7,56:$Va},{19:[1,259]},{50:[1,260]},{30:[1,261],43:[1,262],44:[1,263]},{57:[1,264],64:265,65:$Vf1,67:$Vg1},o($Vi1,[2,78]),{22:70,26:$Vn,31:266,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{27:[1,267]},o($Vf,[2,83]),{2:$Vj1,7:268,8:270,9:271,10:272,11:273,12:274,13:275,14:276,15:277,16:278,17:279,21:280,22:281,23:282,25:$V3,26:$V4,32:$V5,45:23,46:32,47:$V6,51:$V7,54:$V8,55:$V9,56:$Va,57:[1,269],59:$Vb,62:$Vc,68:$Vd,73:$Ve},{56:[2,85]},{56:$Vh1,58:284},o($V91,[2,89]),o($V91,$V41,{39:190,40:191,29:285,41:$V51}),o([19,27,42,43,44,50,71,87,88,89],[2,116],{74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN}),{43:$VA,44:$VB,50:[1,286],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($VS,[2,140]),o($VS,[2,142]),{43:$VA,44:$VB,50:[1,287],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{43:$VA,44:$VB,50:[1,288],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($VS,[2,139]),o($VS,[2,141]),{43:$VA,44:$VB,50:[1,289],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{43:$VA,44:$VB,50:[1,290],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($VS,[2,131]),o($VS,[2,132]),{43:$VA,44:$VB,50:[1,291],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($VR,[2,147]),{19:[1,292],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},{19:[1,293],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($Vf,[2,61]),o($Vf,[2,62]),o($Vf,[2,65]),{13:294,56:$Va},{22:70,26:$Vn,31:295,36:$Vo,41:$Vp,48:$Vq,74:$Vr,75:$Vs,80:$Vt,90:63,91:$Vu,92:$Vv,93:$Vw,94:71,95:72,97:73,102:$Vx},{50:[2,74]},{50:[2,75]},o($Vf,[2,76]),o($Vi1,[2,77]),{27:[1,296],43:$VA,44:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($Vi1,$Vk1,{6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,21:15,22:16,23:17,45:23,46:32,66:297,4:298,2:$V0,18:$V1,20:$V2,25:$V3,26:$V4,32:$V5,47:$V6,51:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,62:$Vc,68:$Vd,73:$Ve}),{2:$Vj1,8:300,9:271,10:272,11:273,12:274,13:275,14:276,15:277,16:278,17:279,21:280,22:281,23:282,25:$V3,26:$V4,32:$V5,45:23,46:32,47:$V6,51:$V7,54:$V8,55:$V9,56:$Va,57:[1,299],59:$Vb,62:$Vc,68:$Vd,73:$Ve},o($Vf,[2,69]),o($Vl1,[2,5]),o($Vl1,[2,21]),o($Vl1,[2,22]),o($Vl1,[2,23]),o($Vl1,[2,24]),o($Vl1,[2,25]),o($Vl1,[2,26]),o($Vl1,[2,27]),o($Vl1,[2,28]),o($Vl1,[2,29]),o($Vl1,[2,30]),{19:[1,301]},{19:[1,302]},o($Vl1,$Vg,{24:303,19:$Vh}),o($Vf,[2,84]),o($V91,[2,91]),o($VS,[2,138]),o($VS,[2,144]),o($VS,[2,137]),o($VS,[2,143]),o($VS,[2,130]),o($VS,[2,133]),o($V01,[2,34]),o($V01,[2,36]),o($Vf,[2,70]),{43:$VA,44:$VB,50:[2,73],74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ},o($Vi1,$Vk1,{6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,21:15,22:16,23:17,45:23,46:32,4:298,66:304,2:$V0,18:$V1,20:$V2,25:$V3,26:$V4,32:$V5,47:$V6,51:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,62:$Vc,68:$Vd,73:$Ve}),o($Vi1,[2,80]),o($Vi1,[2,81],{9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,21:15,22:16,23:17,45:23,46:32,6:34,2:$V0,18:$V1,20:$V2,25:$V3,26:$V4,32:$V5,47:$V6,51:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,62:$Vc,68:$Vd,73:$Ve}),o($Vf,[2,68]),o($Vl1,[2,4]),o($Vl1,[2,31]),o($Vl1,[2,32]),o($Vl1,[2,33]),o($Vi1,[2,79])],
defaultActions: {33:[2,1],237:[2,85],262:[2,74],263:[2,75]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {errores} = require ('../Error/Errores');
    const {Error_} = require('../Error/Error')
    //Instrucciones
    const {Print} = require('../Instrucciones/Funciones/Print');
    const {Declaracion} = require('../Instrucciones/Variables/Declaracion');
    const {Asignacion} = require('../Instrucciones/Variables/Asignacion');
    const {AsignarAcceso} = require('../Instrucciones/Variables/AsignarAcceso');
    const {If} = require('../Instrucciones/Control/If');
    const {Cuerpo} = require('../Instrucciones/Control/Cuerpo');
    const {While} = require('../Instrucciones/Control/While');
    const {DoWhile} = require('../Instrucciones/Control/DoWhile');
    const {For} = require('../Instrucciones/Control/For');
    const {Break} = require('../Instrucciones/Gotos/Break');
    const {Continue} = require('../Instrucciones/Gotos/Continue');
    const {Switch} = require('../Instrucciones/Control/Switch');
    const {Case, tipoCase} = require('../Instrucciones/Control/Case');

    //Funciones
    const {Funcion} = require('../Instrucciones/Funciones/Funcion');
    const {Call} = require('../Expresion/Accesos/Call');
    const {Parametro} = require('../Instrucciones/Funciones/Parametro');
    const {Return} = require('../Instrucciones/Gotos/Return');

    // Accesos
    const {AccesoArray} = require('../Expresion/Accesos/AccesoArray');
    const {NativaString} = require('../Expresion/Accesos/NativaString');

    
    
    //Expresiones
    const {Variable} = require('../Expresion/Literales/Variable');
    const {Literal} = require('../Expresion/Literales/Literal');
    const {valorArray} = require('../Expresion/Literales/valorArray');
    const {Aritmetica, tipoAritmetica} = require('../Expresion/Basicas/Aritmetica');
    const {Unario, tipoUnario} = require('../Expresion/NoBinaria/Unario');
    const {Relacional, tipoRelacional} = require('../Expresion/Basicas/Relacional');
    const {Logica, tipoLogica} = require('../Expresion/Basicas/Logica');
    const {Ternario} = require('../Expresion/NoBinaria/Ternario');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Se ignoran espacios en blanco */
break;
case 1:// comentario una l√≠nea
break;
case 2:// comentario multiples l√≠neas
break;
case 3:return 91;
break;
case 4:return 92;
break;
case 5:return 93;
break;
case 6:return 36;
break;
case 7:return 33
break;
case 8:return 35
break;
case 9:return 34
break;
case 10:return 38
break;
case 11:return 37
break;
case 12:return "LET";
break;
case 13:return "CONST";
break;
case 14:return 47;
break;
case 15:return 51
break;
case 16:return 53
break;
case 17:return 54
break;
case 18:return 55
break;
case 19:return 18
break;
case 20:return 20
break;
case 21:return 'GRAFICARTS'
break;
case 22:return 59
break;
case 23:return 62
break;
case 24:return 65
break;
case 25:return 67
break;
case 26:return 68
break;
case 27:return 73
break;
case 28:return 37
break;
case 29:return 'OF'
break;
case 30:return 'IN'
break;
case 31:return 102
break;
case 32:return 103
break;
case 33:return 98
break;
case 34:return 99
break;
case 35:return 100
break;
case 36:return 101
break;
case 37:return 43;
break;
case 38:return 44;
break;
case 39:return 74;
break;
case 40:return 75;
break;
case 41:return 79;
break;
case 42:return 76;
break;
case 43:return 77;
break;
case 44:return 78;
break;
case 45:return 84;
break;
case 46:return 83;
break;
case 47:return 82;
break;
case 48:return 81;
break;
case 49:return 85;
break;
case 50:return 86;
break;
case 51:return 30;
break;
case 52:return 88;
break;
case 53:return 87;
break;
case 54:return 80;
break;
case 55:return 48;
break;
case 56:return 50;
break;
case 57:return 56;
break;
case 58:return 57;
break;
case 59:return 41;		
break;
case 60:return 42;
break;
case 61:return 19;
break;
case 62:return 71;
break;
case 63:return 27;
break;
case 64:return 89;
break;
case 65:return 96;
break;
case 66:return 'DINVERT'     
break;
case 67:return 26;
break;
case 68:return 5;
break;
case 69: errores.push(new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, "L√©xico", yy_.yytext, )); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)(\.([0-9]+))?))/i,/^(?:((("[^"]*")|('[^']*'))))/i,/^(?:((true|false)))/i,/^(?:null\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:type\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:console\.log\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:graficar_ts\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:type\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:new\b)/i,/^(?:array\b)/i,/^(?:charat\b)/i,/^(?:tolowercase\b)/i,/^(?:touppercase\b)/i,/^(?:concat\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:\\)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_√±√ë]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}