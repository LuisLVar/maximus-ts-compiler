/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,15],$V2=[1,16],$V3=[1,22],$V4=[1,24],$V5=[1,23],$V6=[1,21],$V7=[1,26],$V8=[1,28],$V9=[1,29],$Va=[1,27],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[2,5,20,22,27,28,34,49,53,56,57,58,59,61,66,69,71,72,77],$Vg=[2,55],$Vh=[1,42],$Vi=[1,46],$Vj=[1,50],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,71],$Vo=[1,70],$Vp=[1,76],$Vq=[1,66],$Vr=[1,63],$Vs=[1,62],$Vt=[1,64],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,77],$Vy=[32,43],$Vz=[1,80],$VA=[2,5,20,22,27,28,34,49,53,55,56,57,58,59,61,66,69,71,72,77],$VB=[1,107],$VC=[1,108],$VD=[1,101],$VE=[1,102],$VF=[1,103],$VG=[1,104],$VH=[1,105],$VI=[1,106],$VJ=[1,109],$VK=[1,110],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[1,114],$VP=[1,115],$VQ=[1,116],$VR=[1,117],$VS=[21,29,44,45,46,52,75,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93],$VT=[21,29,43,44,45,46,52,75,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,100],$VU=[1,131],$VV=[44,52,75],$VW=[1,139],$VX=[1,133],$VY=[1,134],$VZ=[1,135],$V_=[1,136],$V$=[1,137],$V01=[1,138],$V11=[2,5,20,22,27,28,34,38,43,49,50,53,56,57,58,59,61,66,69,71,72,77,78,79,84,95,96,97,106],$V21=[28,38,43,50,78,79,84,95,96,97,106],$V31=[1,157],$V41=[21,32],$V51=[2,50],$V61=[1,198],$V71=[21,32,43,52,58,75],$V81=[1,210],$V91=[2,94],$Va1=[52,75],$Vb1=[21,29,44,45,46,52,75,78,79,85,86,87,88,89,90,91,92,93],$Vc1=[21,29,44,45,46,52,75,78,79,80,81,82,85,86,87,88,89,90,91,92,93],$Vd1=[21,29,44,45,46,52,75,85,86,87,88,89,90,91,92,93],$Ve1=[21,29,44,45,46,52,75,89,90,91,92,93],$Vf1=[1,247],$Vg1=[1,248],$Vh1=[1,250],$Vi1=[59,69,71],$Vj1=[1,303],$Vk1=[2,90],$Vl1=[2,27,28,34,49,53,56,57,58,59,61,66,72,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"InstruccionesF":7,"InstruccionF":8,"Imprimir":9,"Declaracion":10,"Asignacion":11,"NTIf":12,"Cuerpo":13,"NTWhile":14,"NTDoWhile":15,"NTFor":16,"NTForIn":17,"NTForOf":18,"NTSwitch":19,"BREAK":20,"PUNTOYCOMA":21,"CONTINUE":22,"NTFuncion":23,"NTCall":24,"NTReturn":25,"Recuperar":26,"LET":27,"ID":28,"DOSPUNTOS":29,"Tipo":30,"Dimensiones":31,"IGUAL":32,"Expresion":33,"CONST":34,"TNUMBER":35,"TSTRING":36,"TBOOLEAN":37,"NULL":38,"TTYPE":39,"TVOID":40,"NumeroDim":41,"Dim":42,"CORIZQ":43,"CORDER":44,"INC":45,"DEC":46,"AccesosA":47,"AccesoA":48,"CONSOLELOG":49,"PARIZQ":50,"ListaExp":51,"PARDER":52,"TIF":53,"NTElse":54,"TELSE":55,"TWHILE":56,"TDO":57,"LLAVEIZQ":58,"LLAVEDER":59,"CuerpoFuncion":60,"TFOR":61,"AorD":62,"AsignacionFor":63,"IN":64,"OF":65,"TSWITCH":66,"Cases":67,"Caso":68,"TCASE":69,"Case2":70,"TDEFAULT":71,"TFUNCTION":72,"TipoFuncion":73,"Parametros":74,"COMA":75,"Param":76,"TRETURN":77,"MAS":78,"MENOS":79,"POR":80,"DIV":81,"MOD":82,"POT":83,"NOT":84,"MAYORQUE":85,"MENORQUE":86,"MAYORIGUAL":87,"MENORIGUAL":88,"IGUALIGUAL":89,"DESIGUAL":90,"AND":91,"OR":92,"INTER":93,"F":94,"NUMBER":95,"STRING":96,"BOOLEAN":97,"Accesos":98,"valorArray":99,"PUNTO":100,"Acceso":101,"CHARAT":102,"TOLOWERCASE":103,"TOUPPERCASE":104,"CONCAT":105,"TNEW":106,"TARRAY":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"BREAK",21:"PUNTOYCOMA",22:"CONTINUE",27:"LET",28:"ID",29:"DOSPUNTOS",32:"IGUAL",34:"CONST",35:"TNUMBER",36:"TSTRING",37:"TBOOLEAN",38:"NULL",39:"TTYPE",40:"TVOID",43:"CORIZQ",44:"CORDER",45:"INC",46:"DEC",49:"CONSOLELOG",50:"PARIZQ",52:"PARDER",53:"TIF",55:"TELSE",56:"TWHILE",57:"TDO",58:"LLAVEIZQ",59:"LLAVEDER",61:"TFOR",64:"IN",65:"OF",66:"TSWITCH",69:"TCASE",71:"TDEFAULT",72:"TFUNCTION",75:"COMA",77:"TRETURN",78:"MAS",79:"MENOS",80:"POR",81:"DIV",82:"MOD",83:"POT",84:"NOT",85:"MAYORQUE",86:"MENORQUE",87:"MAYORIGUAL",88:"MENORIGUAL",89:"IGUALIGUAL",90:"DESIGUAL",91:"AND",92:"OR",93:"INTER",95:"NUMBER",96:"STRING",97:"BOOLEAN",100:"PUNTO",102:"CHARAT",103:"TOLOWERCASE",104:"TOUPPERCASE",105:"CONCAT",106:"TNEW",107:"TARRAY"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[10,8],[10,6],[10,8],[10,6],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[31,1],[31,0],[41,2],[41,1],[42,2],[26,1],[26,0],[11,4],[11,3],[11,3],[11,4],[47,4],[47,1],[48,4],[9,5],[12,6],[54,2],[54,2],[54,0],[14,5],[15,7],[13,3],[13,2],[60,3],[60,2],[16,8],[17,7],[17,8],[18,7],[18,8],[62,1],[62,1],[63,3],[63,2],[63,2],[19,7],[67,2],[67,1],[68,4],[68,3],[70,1],[70,0],[23,6],[23,7],[73,3],[73,0],[24,3],[24,4],[74,3],[74,1],[76,4],[76,1],[25,2],[25,1],[51,3],[51,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,2],[33,2],[33,2],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,5],[33,1],[94,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[98,3],[98,1],[98,4],[98,6],[98,5],[98,5],[98,6],[101,3],[101,3],[101,4],[101,6],[101,6],[101,5],[101,5],[101,5],[101,5],[101,6],[101,6],[99,3],[99,2],[99,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 4: case 85:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 5: case 61: case 86: case 98: case 104:

        this.$ = [$$[$0]];
    
break;
case 6: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 19: case 23: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 48: case 49: case 52: case 65: case 66: case 89: case 125: case 132: case 133: case 134: case 136:

        this.$ = $$[$0];
    
break;
case 7: case 24:

        this.$ = $$[$0];
    
    
break;
case 17:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 18:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 20: case 21: case 35: case 36:

        this.$ = $$[$0-1];
    
break;
case 22: case 37:
 
        errores.push(new Error_(_$[$0-1].first_line, _$[$0-1].first_column, "Sint√°ctico", "Se esperaba: "+ yytext));
    
break;
case 38:

        let dim1 = $$[$0-3];
        let declaracion1 = new Declaracion($$[$0-6], { tipo: $$[$0-4], dim: dim1 }, $$[$0-1], 1, _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = declaracion1;
    
break;
case 39:

        let dim2 = $$[$0-1];
        let declaracion2 = new Declaracion($$[$0-4], { tipo: $$[$0-2], dim: dim2 }, null, 1, _$[$0-5].first_line, _$[$0-5].first_column);
        this.$ = declaracion2;
    
break;
case 40:

        let dim3 = $$[$0-3];
        let declaracion3 = new Declaracion($$[$0-6], { tipo: $$[$0-4], dim: dim3 }, $$[$0-1], 2, _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = declaracion3;
    
break;
case 41:

        let dim4 = $$[$0-1];
        let declaracion4 = new Declaracion($$[$0-4], { tipo: $$[$0-2], dim: dim4 }, null, 2, _$[$0-5].first_line, _$[$0-5].first_column);
        this.$ = declaracion4;
    
break;
case 42: case 50:

        this.$ = 0;
    
break;
case 43: case 53:

        this.$ = 1;
    
break;
case 44:

        this.$ = 2;
    
break;
case 45:

        this.$ = 3;
    
break;
case 46:

        this.$ = 5;
    
break;
case 47: case 94:

        this.$ = 6;
    
break;
case 51:

        this.$ = $$[$0-1] + $$[$0];
    
break;
case 56:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 57:

        this.$ = new Asignacion($$[$0-2], new Unario( 
            new Variable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column),
             tipoUnario.INC, _$[$0-2].first_line,_$[$0-2].first_column), _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 58:

        this.$ = new Asignacion($$[$0-2], new Unario( 
            new Variable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column),
             tipoUnario.DEC, _$[$0-2].first_line,_$[$0-2].first_column), _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 59:

        this.$ = new AsignarAcceso($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 60:

        $$[$0-3].push({id: '', indice: $$[$0-1], tipo: 4});
        this.$ = $$[$0-3];
    
break;
case 62:

        this.$ = {id: $$[$0-3], indice: $$[$0-1], tipo: 4}
    
break;
case 63:

        this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 64:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 67:

        this.$ = null;
    
break;
case 68:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 69:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 70: case 72:

        this.$ = new Cuerpo($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 71: case 73:

        this.$ = new Cuerpo(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 74:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 75:

        this.$ = new ForIn($$[$0-4], null, $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 76:

        this.$ = new ForIn($$[$0-4], new Declaracion($$[$0-4], { tipo: 0, dim: 0 }, null, 1, _$[$0-7].first_line, _$[$0-7].first_column),
         $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 77:

        this.$ = new ForOf($$[$0-4], null, $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 78:

        this.$ = new ForOf($$[$0-4], new Declaracion($$[$0-4], { tipo: 11, dim: 0 }, null, 1, _$[$0-7].first_line, _$[$0-7].first_column),
         $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 81:

        this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 82:

        this.$ = new Asignacion($$[$0-1], new Unario( 
            new Variable($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),
             tipoUnario.INC, _$[$0-1].first_line,_$[$0-1].first_column), _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 83:

        this.$ = new Asignacion($$[$0-1], new Unario( 
            new Variable($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),
             tipoUnario.DEC, _$[$0-1].first_line,_$[$0-1].first_column), _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 84:

        this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 87:

        this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column, tipoCase.CASE);
    
break;
case 88:

        this.$ = new Case(new Literal(0, _$[$0-2].first_line, _$[$0-2].first_column, 0), $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, tipoCase.DEFAULT);
    
break;
case 90:

        this.$ = new Array();
    
break;
case 91:

        this.$ = new Funcion($$[$0-4], $$[$0], new Array(), $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 92:

        this.$ = new Funcion($$[$0-5], $$[$0], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 93:

        this.$ = { tipo: $$[$0-1], dim: $$[$0]};
    
break;
case 95:

        this.$ = new Call($$[$0-2], new Array(), _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 96:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 97: case 103:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 99:

        let dimPar = $$[$0];
        let param = new Parametro($$[$0-3], {tipo: $$[$0-1], dim: dimPar});
        this.$ = param;
    
break;
case 100:

        this.$ = new Parametro($$[$0], 9);
    
break;
case 101:

        this.$ = new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 102:

        this.$ = new Return(new Literal(0, _$[$0].first_line, _$[$0].first_column, 6), _$[$0].first_line, _$[$0].first_column);
    
break;
case 105:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.MAS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 106:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.MENOS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 107:
 
        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.POR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 108:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 109:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 110:

        this.$ = new Aritmetica($$[$0-2], $$[$0], tipoAritmetica.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 111:

        this.$ = new Unario($$[$0], tipoUnario.UMENOS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 112:

        this.$ = new Unario($$[$0], tipoUnario.UMAS, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 113:

        this.$ = new Unario($$[$0-1], tipoUnario.INC, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 114:

        this.$ = new Unario($$[$0-1], tipoUnario.DEC, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 115:

        this.$ = new Unario($$[$0], tipoUnario.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 116:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.MAYORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 117:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.MENORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 118:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.MAYORIGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 119:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.MENORIGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 120:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.IGUALIGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 121:

        this.$ = new Relacional($$[$0-2], $$[$0], tipoRelacional.DESIGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 122:

        this.$ = new Logica($$[$0-2], $$[$0], tipoLogica.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 123:

        this.$ = new Logica($$[$0-2], $$[$0], tipoLogica.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 124:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 126:
 
        this.$ = $$[$0-1];
    
break;
case 127:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 128:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 129:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 130:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 131:

        this.$ = new Variable($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 135:

        this.$ = new NativaString(null, $$[$0], $$[$0-2], 4, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 137:
 
       this.$ = new AccesoArray(null, $$[$0-1], $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 138:

        this.$ = new NativaString(null, $$[$0-1], $$[$0-5], 0, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 139:

        this.$ = new NativaString(null, null, $$[$0-4], 1, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 140:

        this.$ = new NativaString(null, null, $$[$0-4], 2, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 141:

        this.$ = new NativaString(null, $$[$0-1], $$[$0-5], 3, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 142:

        this.$ = new NativaString(new Variable($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column), $$[$0], null, 4, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 143:

        this.$ = new NativaString(new Literal($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, 1), $$[$0], null, 4, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 144:
 
       this.$ = new AccesoArray($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 145:

        this.$ = new NativaString(new Variable($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column), $$[$0-1], null, 0, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 146:

        this.$ = new NativaString(new Literal($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column, 1), $$[$0-1], null, 0, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 147:

        this.$ = new NativaString(new Variable($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), null, null, 1, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 148:

        this.$ = new NativaString(new Literal($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column, 1), null, null, 1, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 149:

        this.$ = new NativaString(new Variable($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column), null, null, 2, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 150:

        this.$ = new NativaString(new Literal($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column, 1), null, null, 2, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 151:

        this.$ = new NativaString(new Variable($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column), $$[$0-1], null, 3, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 152:

        this.$ = new NativaString(new Literal($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column, 1), $$[$0-1], null, 3, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 153:

        this.$ = new valorArray($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 154:

        this.$ = new valorArray(new Array(), null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 155:

        this.$ = new valorArray(new Array(), $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:17,24:18,25:19,27:$V3,28:$V4,34:$V5,47:25,48:34,49:$V6,53:$V7,56:$V8,57:$V9,58:$Va,61:$Vb,66:$Vc,72:$Vd,77:$Ve},{1:[3]},{2:$V0,5:[1,35],6:36,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:17,24:18,25:19,27:$V3,28:$V4,34:$V5,47:25,48:34,49:$V6,53:$V7,56:$V8,57:$V9,58:$Va,61:$Vb,66:$Vc,72:$Vd,77:$Ve},o($Vf,[2,3]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),{21:[1,37]},{21:[1,38]},o($Vf,[2,19]),{21:[1,39]},{21:[1,40]},o($Vf,$Vg,{26:41,21:$Vh}),{50:[1,43]},{28:[1,44]},{28:[1,45]},{32:$Vi,43:$Vj,45:$Vk,46:$Vl,50:$Vm},{32:[1,51],43:[1,52]},{50:[1,53]},{2:$V0,4:54,6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:17,24:18,25:19,27:$V3,28:$V4,34:$V5,47:25,48:34,49:$V6,53:$V7,56:$V8,57:$V9,58:$Va,59:[1,55],61:$Vb,66:$Vc,72:$Vd,77:$Ve},{50:[1,56]},{13:57,58:$Va},{50:[1,58]},{50:[1,59]},{28:[1,60]},{21:[2,102],24:72,28:$Vn,33:61,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($Vy,[2,61]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),o($Vf,[2,54]),{24:72,28:$Vn,33:79,38:$Vo,43:$Vp,50:$Vq,51:78,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{29:$Vz},{29:[1,81]},{24:72,28:$Vn,33:82,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{21:[1,83]},{21:[1,84]},{24:72,28:$Vn,33:79,38:$Vo,43:$Vp,50:$Vq,51:86,52:[1,85],78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:87,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:88,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:89,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:90,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{2:$V0,6:36,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:$V1,22:$V2,23:17,24:18,25:19,27:$V3,28:$V4,34:$V5,47:25,48:34,49:$V6,53:$V7,56:$V8,57:$V9,58:$Va,59:[1,91],61:$Vb,66:$Vc,72:$Vd,77:$Ve},o($VA,[2,71]),{24:72,28:$Vn,33:92,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{56:[1,93]},{10:97,11:98,27:[1,96],28:[1,95],34:$V5,47:25,48:34,62:94},{24:72,28:$Vn,33:99,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{50:[1,100]},{21:[2,101],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{24:72,28:$Vn,33:118,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:119,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:120,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($VS,[2,125]),{24:72,28:$Vn,33:121,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($VS,[2,127]),o($VS,[2,128],{100:[1,122]}),o($VS,[2,129]),o($VS,[2,130]),o($VS,[2,131],{43:[1,124],50:$Vm,100:[1,123]}),o($VS,[2,132]),o($VS,[2,133],{43:[1,126],100:[1,125]}),o($VS,[2,134]),o($VT,[2,136]),{24:72,28:$Vn,33:79,38:$Vo,43:$Vp,44:[1,128],50:$Vq,51:127,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{107:[1,129]},{52:[1,130],75:$VU},o($VV,[2,104],{45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR}),{28:$VW,30:132,35:$VX,36:$VY,37:$VZ,38:$V_,39:$V$,40:$V01},{28:$VW,30:140,35:$VX,36:$VY,37:$VZ,38:$V_,39:$V$,40:$V01},{21:[1,141],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($V11,[2,57]),o($V11,[2,58]),o($VS,[2,95]),{52:[1,142],75:$VU},{44:[1,143],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{21:[1,144],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{44:[1,145],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{45:$VB,46:$VC,52:[1,146],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($VA,[2,70]),{45:$VB,46:$VC,52:[1,147],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{50:[1,148]},{24:72,28:$Vn,33:149,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{32:$Vi,43:$Vj,45:$Vk,46:$Vl,64:[1,150],65:[1,151]},{28:[1,152]},o($V21,[2,79]),o($V21,[2,80]),{45:$VB,46:$VC,52:[1,153],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{28:$V31,52:[1,154],74:155,76:156},{24:72,28:$Vn,33:158,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:159,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:160,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:161,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:162,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:163,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($VS,[2,113]),o($VS,[2,114]),{24:72,28:$Vn,33:164,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:165,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:166,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:167,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:168,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:169,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:170,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:171,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:172,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($VS,[2,111]),o($VS,[2,112]),o($VS,[2,115]),{45:$VB,46:$VC,52:[1,173],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{28:[1,174],102:[1,175],103:[1,176],104:[1,177],105:[1,178]},{28:[1,179],102:[1,180],103:[1,181],104:[1,182],105:[1,183]},{24:72,28:$Vn,33:184,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{28:[1,185],102:[1,186],103:[1,187],104:[1,188],105:[1,189]},{24:72,28:$Vn,33:190,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{44:[1,191],75:$VU},o($VS,[2,154]),{50:[1,192]},{21:[1,193]},{24:72,28:$Vn,33:194,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($V41,$V51,{31:195,41:196,42:197,43:$V61}),o($V71,[2,42]),o($V71,[2,43]),o($V71,[2,44]),o($V71,[2,45]),o($V71,[2,46]),o($V71,[2,47]),o($V71,[2,48]),o($V41,$V51,{41:196,42:197,31:199,43:$V61}),o($V11,[2,56]),o($VS,[2,96]),o($Vy,[2,62]),o($V11,[2,59]),o($Vy,[2,60]),{13:200,58:$Va},{13:201,58:$Va},{24:72,28:$Vn,33:202,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{21:[1,203],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{24:72,28:$Vn,33:204,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:205,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{29:$Vz,64:[1,206],65:[1,207]},{58:[1,208]},{29:$V81,58:$V91,73:209},{52:[1,211],75:[1,212]},o($Va1,[2,98]),o($Va1,[2,100],{29:[1,213]}),o($Vb1,[2,105],{80:$VF,81:$VG,82:$VH,83:$VI}),o($Vb1,[2,106],{80:$VF,81:$VG,82:$VH,83:$VI}),o($Vc1,[2,107],{83:$VI}),o($Vc1,[2,108],{83:$VI}),o($Vc1,[2,109],{83:$VI}),o($Vc1,[2,110],{83:$VI}),o($Vd1,[2,116],{78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI}),o($Vd1,[2,117],{78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI}),o($Vd1,[2,118],{78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI}),o($Vd1,[2,119],{78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI}),o($Ve1,[2,120],{78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o($Ve1,[2,121],{78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o([21,29,44,45,46,52,75,91,92],[2,122],{78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,93:$VR}),o([21,29,44,45,46,52,75,92],[2,123],{78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,93:$VR}),{29:[1,214],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($VS,[2,126]),o($VT,[2,143]),{50:[1,215]},{50:[1,216]},{50:[1,217]},{50:[1,218]},o($VT,[2,142]),{50:[1,219]},{50:[1,220]},{50:[1,221]},{50:[1,222]},{44:[1,223],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($VT,[2,135]),{50:[1,224]},{50:[1,225]},{50:[1,226]},{50:[1,227]},{44:[1,228],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($VS,[2,153]),{24:72,28:$Vn,33:229,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($Vf,[2,63]),o($VV,[2,103],{45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR}),{21:[1,231],32:[1,230]},o([21,32,52,58,75],[2,49],{42:232,43:$V61}),o($V71,[2,52]),{44:[1,233]},{21:[1,235],32:[1,234]},o($Vf,[2,67],{54:236,55:[1,237]}),o($Vf,[2,68]),{45:$VB,46:$VC,52:[1,238],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{28:[1,240],63:239},{45:$VB,46:$VC,52:[1,241],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{45:$VB,46:$VC,52:[1,242],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{24:72,28:$Vn,33:243,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:244,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{67:245,68:246,69:$Vf1,71:$Vg1},{58:$Vh1,60:249},{28:$VW,30:251,35:$VX,36:$VY,37:$VZ,38:$V_,39:$V$,40:$V01},{29:$V81,58:$V91,73:252},{28:$V31,76:253},{28:$VW,30:254,35:$VX,36:$VY,37:$VZ,38:$V_,39:$V$,40:$V01},{24:72,28:$Vn,33:255,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:256,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{52:[1,257]},{52:[1,258]},{24:72,28:$Vn,33:259,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{24:72,28:$Vn,33:260,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{52:[1,261]},{52:[1,262]},{24:72,28:$Vn,33:263,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($VT,[2,144]),{24:72,28:$Vn,33:264,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{52:[1,265]},{52:[1,266]},{24:72,28:$Vn,33:267,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($VT,[2,137]),{45:$VB,46:$VC,52:[1,268],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{24:72,28:$Vn,33:269,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($V11,[2,39]),o($V71,[2,51]),o($V71,[2,53]),{24:72,28:$Vn,33:270,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},o($V11,[2,41]),o($Vf,[2,64]),{12:272,13:271,53:$V7,58:$Va},{21:[1,273]},{52:[1,274]},{32:[1,275],45:[1,276],46:[1,277]},{13:278,58:$Va},{13:279,58:$Va},{45:$VB,46:$VC,52:[1,280],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{45:$VB,46:$VC,52:[1,281],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{59:[1,282],68:283,69:$Vf1,71:$Vg1},o($Vi1,[2,86]),{24:72,28:$Vn,33:284,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{29:[1,285]},o($Vf,[2,91]),{2:$Vj1,7:286,8:288,9:289,10:290,11:291,12:292,13:293,14:294,15:295,16:296,17:297,18:298,19:299,23:300,24:301,25:302,27:$V3,28:$V4,34:$V5,47:25,48:34,49:$V6,53:$V7,56:$V8,57:$V9,58:$Va,59:[1,287],61:$Vb,66:$Vc,72:$Vd,77:$Ve},{31:304,41:196,42:197,43:$V61,58:$V51},{58:$Vh1,60:305},o($Va1,[2,97]),o($Va1,$V51,{41:196,42:197,31:306,43:$V61}),o([21,29,44,45,46,52,75,91,92,93],[2,124],{78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),{45:$VB,46:$VC,52:[1,307],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($VT,[2,148]),o($VT,[2,150]),{45:$VB,46:$VC,52:[1,308],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{45:$VB,46:$VC,52:[1,309],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($VT,[2,147]),o($VT,[2,149]),{45:$VB,46:$VC,52:[1,310],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{45:$VB,46:$VC,52:[1,311],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($VT,[2,139]),o($VT,[2,140]),{45:$VB,46:$VC,52:[1,312],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($VS,[2,155]),{21:[1,313],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},{21:[1,314],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($Vf,[2,65]),o($Vf,[2,66]),o($Vf,[2,69]),{13:315,58:$Va},{24:72,28:$Vn,33:316,38:$Vo,43:$Vp,50:$Vq,78:$Vr,79:$Vs,84:$Vt,94:65,95:$Vu,96:$Vv,97:$Vw,98:73,99:74,101:75,106:$Vx},{52:[2,82]},{52:[2,83]},o($Vf,[2,75]),o($Vf,[2,77]),{13:317,58:$Va},{13:318,58:$Va},o($Vf,[2,84]),o($Vi1,[2,85]),{29:[1,319],45:$VB,46:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($Vi1,$Vk1,{6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,23:17,24:18,25:19,47:25,48:34,70:320,4:321,2:$V0,20:$V1,22:$V2,27:$V3,28:$V4,34:$V5,49:$V6,53:$V7,56:$V8,57:$V9,58:$Va,61:$Vb,66:$Vc,72:$Vd,77:$Ve}),{2:$Vj1,8:323,9:289,10:290,11:291,12:292,13:293,14:294,15:295,16:296,17:297,18:298,19:299,23:300,24:301,25:302,27:$V3,28:$V4,34:$V5,47:25,48:34,49:$V6,53:$V7,56:$V8,57:$V9,58:$Va,59:[1,322],61:$Vb,66:$Vc,72:$Vd,77:$Ve},o($Vf,[2,73]),o($Vl1,[2,5]),o($Vl1,[2,23]),o($Vl1,[2,24]),o($Vl1,[2,25]),o($Vl1,[2,26]),o($Vl1,[2,27]),o($Vl1,[2,28]),o($Vl1,[2,29]),o($Vl1,[2,30]),o($Vl1,[2,31]),o($Vl1,[2,32]),o($Vl1,[2,33]),o($Vl1,[2,34]),{21:[1,324]},{21:[1,325]},o($Vl1,$Vg,{26:326,21:$Vh}),{58:[2,93]},o($Vf,[2,92]),o($Va1,[2,99]),o($VT,[2,146]),o($VT,[2,152]),o($VT,[2,145]),o($VT,[2,151]),o($VT,[2,138]),o($VT,[2,141]),o($V11,[2,38]),o($V11,[2,40]),o($Vf,[2,74]),{45:$VB,46:$VC,52:[2,81],78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR},o($Vf,[2,76]),o($Vf,[2,78]),o($Vi1,$Vk1,{6:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,23:17,24:18,25:19,47:25,48:34,4:321,70:327,2:$V0,20:$V1,22:$V2,27:$V3,28:$V4,34:$V5,49:$V6,53:$V7,56:$V8,57:$V9,58:$Va,61:$Vb,66:$Vc,72:$Vd,77:$Ve}),o($Vi1,[2,88]),o($Vi1,[2,89],{9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,23:17,24:18,25:19,47:25,48:34,6:36,2:$V0,20:$V1,22:$V2,27:$V3,28:$V4,34:$V5,49:$V6,53:$V7,56:$V8,57:$V9,58:$Va,61:$Vb,66:$Vc,72:$Vd,77:$Ve}),o($Vf,[2,72]),o($Vl1,[2,4]),o($Vl1,[2,35]),o($Vl1,[2,36]),o($Vl1,[2,37]),o($Vi1,[2,87])],
defaultActions: {35:[2,1],276:[2,82],277:[2,83],304:[2,93]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {errores} = require ('../Error/Errores');
    const {Error_} = require('../Error/Error')
    //Instrucciones
    const {Print} = require('../Instrucciones/Funciones/Print');
    const {Declaracion} = require('../Instrucciones/Variables/Declaracion');
    const {Asignacion} = require('../Instrucciones/Variables/Asignacion');
    const {AsignarAcceso} = require('../Instrucciones/Variables/AsignarAcceso');
    const {If} = require('../Instrucciones/Control/If');
    const {Cuerpo} = require('../Instrucciones/Control/Cuerpo');
    const {While} = require('../Instrucciones/Control/While');
    const {DoWhile} = require('../Instrucciones/Control/DoWhile');
    const {For} = require('../Instrucciones/Control/For');
    const {ForIn} = require('../Instrucciones/Control/ForIn');
    const {ForOf} = require('../Instrucciones/Control/ForOf');
    const {Break} = require('../Instrucciones/Gotos/Break');
    const {Continue} = require('../Instrucciones/Gotos/Continue');
    const {Switch} = require('../Instrucciones/Control/Switch');
    const {Case, tipoCase} = require('../Instrucciones/Control/Case');

    //Funciones
    const {Funcion} = require('../Instrucciones/Funciones/Funcion');
    const {Call} = require('../Expresion/Accesos/Call');
    const {Parametro} = require('../Instrucciones/Funciones/Parametro');
    const {Return} = require('../Instrucciones/Gotos/Return');

    // Accesos
    const {AccesoArray} = require('../Expresion/Accesos/AccesoArray');
    const {NativaString} = require('../Expresion/Accesos/NativaString');

    
    
    //Expresiones
    const {Variable} = require('../Expresion/Literales/Variable');
    const {Literal} = require('../Expresion/Literales/Literal');
    const {valorArray} = require('../Expresion/Literales/valorArray');
    const {Aritmetica, tipoAritmetica} = require('../Expresion/Basicas/Aritmetica');
    const {Unario, tipoUnario} = require('../Expresion/NoBinaria/Unario');
    const {Relacional, tipoRelacional} = require('../Expresion/Basicas/Relacional');
    const {Logica, tipoLogica} = require('../Expresion/Basicas/Logica');
    const {Ternario} = require('../Expresion/NoBinaria/Ternario');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Se ignoran espacios en blanco */
break;
case 1:// comentario una l√≠nea
break;
case 2:// comentario multiples l√≠neas
break;
case 3:return 95;
break;
case 4:return 96;
break;
case 5:return 97;
break;
case 6:return 38;
break;
case 7:return 35
break;
case 8:return 37
break;
case 9:return 36
break;
case 10:return 40
break;
case 11:return 39
break;
case 12:return "LET";
break;
case 13:return "CONST";
break;
case 14:return 49;
break;
case 15:return 53
break;
case 16:return 55
break;
case 17:return 56
break;
case 18:return 57
break;
case 19:return 20
break;
case 20:return 22
break;
case 21:return 'GRAFICARTS'
break;
case 22:return 61
break;
case 23:return 66
break;
case 24:return 69
break;
case 25:return 71
break;
case 26:return 72
break;
case 27:return 77
break;
case 28:return 39
break;
case 29:return 65
break;
case 30:return 64
break;
case 31:return 106
break;
case 32:return 107
break;
case 33:return 102
break;
case 34:return 103
break;
case 35:return 104
break;
case 36:return 105
break;
case 37:return 45;
break;
case 38:return 46;
break;
case 39:return 78;
break;
case 40:return 79;
break;
case 41:return 83;
break;
case 42:return 80;
break;
case 43:return 81;
break;
case 44:return 82;
break;
case 45:return 88;
break;
case 46:return 87;
break;
case 47:return 86;
break;
case 48:return 85;
break;
case 49:return 89;
break;
case 50:return 90;
break;
case 51:return 32;
break;
case 52:return 92;
break;
case 53:return 91;
break;
case 54:return 84;
break;
case 55:return 50;
break;
case 56:return 52;
break;
case 57:return 58;
break;
case 58:return 59;
break;
case 59:return 43;		
break;
case 60:return 44;
break;
case 61:return 21;
break;
case 62:return 75;
break;
case 63:return 29;
break;
case 64:return 93;
break;
case 65:return 100;
break;
case 66:return 'DINVERT'     
break;
case 67:return 28;
break;
case 68:return 5;
break;
case 69: errores.push(new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, "L√©xico", yy_.yytext, )); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)(\.([0-9]+))?))/i,/^(?:((("[^"]*")|('[^']*'))))/i,/^(?:((true|false)))/i,/^(?:null\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:type\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:console\.log\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:graficar_ts\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:type\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:new\b)/i,/^(?:array\b)/i,/^(?:charat\b)/i,/^(?:tolowercase\b)/i,/^(?:touppercase\b)/i,/^(?:concat\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:\\)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_√±√ë]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}