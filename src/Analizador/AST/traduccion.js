/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,19],$V2=[1,20],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,27],$V7=[1,26],$V8=[1,29],$V9=[1,31],$Va=[1,32],$Vb=[1,30],$Vc=[1,33],$Vd=[1,34],$Ve=[1,35],$Vf=[1,37],$Vg=[1,36],$Vh=[2,5,27,28,31,35,36,37,43,51,54,55,56,57,59,64,67,69,70,75,76],$Vi=[2,110],$Vj=[1,46],$Vk=[1,54],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,55],$Vp=[1,56],$Vq=[1,75],$Vr=[1,80],$Vs=[1,87],$Vt=[1,85],$Vu=[1,78],$Vv=[1,72],$Vw=[1,71],$Vx=[1,73],$Vy=[1,76],$Vz=[1,77],$VA=[1,79],$VB=[41,47,48],$VC=[1,93],$VD=[1,91],$VE=[1,92],$VF=[2,5,27,28,31,35,36,37,43,51,53,54,55,56,57,59,64,67,69,70,75,76],$VG=[57,67,69],$VH=[1,125],$VI=[1,126],$VJ=[1,119],$VK=[1,120],$VL=[1,121],$VM=[1,122],$VN=[1,123],$VO=[1,124],$VP=[1,127],$VQ=[1,128],$VR=[1,129],$VS=[1,130],$VT=[1,131],$VU=[1,132],$VV=[1,133],$VW=[1,134],$VX=[1,135],$VY=[25,34,38,44,45,49,57,73,87,88,89,90,91,92,94,95,96,97,98,99,100,101,102],$VZ=[1,146],$V_=[25,34,38,44,45,47,48,49,57,73,87,88,89,90,91,92,94,95,96,97,98,99,100,101,102],$V$=[1,150],$V01=[34,49,73],$V11=[1,159],$V21=[1,157],$V31=[1,153],$V41=[1,154],$V51=[1,155],$V61=[1,156],$V71=[1,158],$V81=[2,5,27,28,31,32,35,36,37,43,48,51,54,55,56,57,59,64,67,69,70,75,76,83,87,88,93,104,105,106],$V91=[32,37,48,56,83,87,88,93,104,105,106],$Va1=[1,179],$Vb1=[57,73],$Vc1=[25,41],$Vd1=[2,119],$Ve1=[1,214],$Vf1=[25,34,37,41,48,56,57,73],$Vg1=[1,228],$Vh1=[2,91],$Vi1=[34,73],$Vj1=[1,234],$Vk1=[25,34,38,44,45,49,57,73,87,88,94,95,96,97,98,99,100,101,102],$Vl1=[25,34,38,44,45,49,57,73,87,88,89,90,91,94,95,96,97,98,99,100,101,102],$Vm1=[25,34,38,44,45,49,57,73,94,95,96,97,98,99,100,101,102],$Vn1=[25,34,38,44,45,49,57,73,98,99,100,101,102],$Vo1=[25,34,37,41,48,57,73],$Vp1=[1,261],$Vq1=[1,262],$Vr1=[1,264],$Vs1=[37,57],$Vt1=[1,312],$Vu1=[2,87],$Vv1=[2,31,35,36,37,43,51,54,55,56,57,59,64,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"InstruccionesCuerpo":6,"InstruccionesFCuerpo":7,"InstruccionesF":8,"Instruccion":9,"InstruccionF":10,"Imprimir":11,"GraficarTS":12,"Declaracion":13,"Asignacion":14,"NTIf":15,"Cuerpo":16,"NTWhile":17,"NTDoWhile":18,"NTFor":19,"NTForIn":20,"NTForOf":21,"NTSwitch":22,"NTFuncion":23,"NTCall":24,"PUNTOYCOMA":25,"NTType":26,"BREAK":27,"CONTINUE":28,"NTReturn":29,"Recuperar":30,"CONSOLELOG":31,"PARIZQ":32,"ListaExp":33,"PARDER":34,"GRAFICARTS":35,"LET":36,"ID":37,"DOSPUNTOS":38,"Tipo":39,"Dimensiones":40,"IGUAL":41,"Expresion":42,"CONST":43,"INC":44,"DEC":45,"AccesosA":46,"PUNTO":47,"CORIZQ":48,"CORDER":49,"AccesoA":50,"TIF":51,"NTElse":52,"TELSE":53,"TWHILE":54,"TDO":55,"LLAVEIZQ":56,"LLAVEDER":57,"CuerpoFuncion":58,"TFOR":59,"AorD":60,"AsignacionFor":61,"IN":62,"OF":63,"TSWITCH":64,"Cases":65,"Caso":66,"TCASE":67,"Case2":68,"TDEFAULT":69,"TFUNCTION":70,"TipoFuncion":71,"Parametros":72,"COMA":73,"Param":74,"TRETURN":75,"TTYPE":76,"ListaType":77,"Atributo":78,"FinType":79,"TNUMBER":80,"TSTRING":81,"TBOOLEAN":82,"NULL":83,"TVOID":84,"NumeroDim":85,"Dim":86,"MAS":87,"MENOS":88,"POR":89,"DIV":90,"MOD":91,"POT":92,"NOT":93,"MAYORQUE":94,"MENORQUE":95,"MAYORIGUAL":96,"MENORIGUAL":97,"IGUALIGUAL":98,"DESIGUAL":99,"AND":100,"OR":101,"INTER":102,"F":103,"NUMBER":104,"BOOLEAN":105,"STRING":106,"callType":107,"Accesos":108,"valorArray":109,"Acceso":110,"PUSH":111,"POP":112,"ListaTypeExp":113,"AtributoExp":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",25:"PUNTOYCOMA",27:"BREAK",28:"CONTINUE",31:"CONSOLELOG",32:"PARIZQ",34:"PARDER",35:"GRAFICARTS",36:"LET",37:"ID",38:"DOSPUNTOS",41:"IGUAL",43:"CONST",44:"INC",45:"DEC",47:"PUNTO",48:"CORIZQ",49:"CORDER",51:"TIF",53:"TELSE",54:"TWHILE",55:"TDO",56:"LLAVEIZQ",57:"LLAVEDER",59:"TFOR",62:"IN",63:"OF",64:"TSWITCH",67:"TCASE",69:"TDEFAULT",70:"TFUNCTION",73:"COMA",75:"TRETURN",76:"TTYPE",80:"TNUMBER",81:"TSTRING",82:"TBOOLEAN",83:"NULL",84:"TVOID",87:"MAS",88:"MENOS",89:"POR",90:"DIV",91:"MOD",92:"POT",93:"NOT",94:"MAYORQUE",95:"MENORQUE",96:"MAYORIGUAL",97:"MENORIGUAL",98:"IGUALIGUAL",99:"DESIGUAL",100:"AND",101:"OR",102:"INTER",104:"NUMBER",105:"BOOLEAN",106:"STRING",111:"PUSH",112:"POP"},
productions_: [0,[3,2],[6,1],[7,1],[4,2],[4,1],[8,2],[8,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,2],[9,1],[9,2],[9,2],[9,2],[9,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,2],[10,2],[10,2],[11,5],[12,4],[13,8],[13,6],[13,5],[13,3],[13,8],[13,5],[13,6],[13,3],[14,4],[14,3],[14,3],[14,4],[46,3],[46,4],[46,1],[50,3],[50,4],[15,6],[52,2],[52,2],[52,0],[17,5],[18,7],[16,3],[16,2],[58,3],[58,2],[19,8],[20,7],[20,8],[21,7],[21,8],[61,3],[61,2],[61,2],[60,1],[60,1],[22,7],[65,2],[65,1],[66,4],[66,3],[68,1],[68,0],[23,6],[23,7],[71,2],[71,0],[24,3],[24,4],[33,3],[33,1],[72,3],[72,1],[74,4],[74,1],[29,2],[29,1],[26,7],[77,2],[77,1],[78,5],[79,1],[79,1],[79,0],[30,1],[30,0],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[40,1],[40,0],[85,2],[85,1],[86,2],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,2],[42,2],[42,2],[42,2],[42,2],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,5],[42,1],[103,3],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[108,3],[108,1],[108,4],[108,6],[108,5],[110,3],[110,4],[110,6],[110,5],[107,3],[113,3],[113,1],[114,3],[109,3],[109,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        let nodoi0 = new Nodo("Instrucciones");
        codigo = "";
        for(let a of $$[$0-1]){
            nodoi0.newHijo(a.nodo);
            codigo = codigo + a.code + "\n";
        }
        let valor = { code: codigo, nodo: nodoi0};
        return valor;
    
break;
case 2:

        nodo = new Nodo("Instrucciones");
        codigo = "";
        for(let a of $$[$0]){
            nodo.newHijo(a.nodo);
            codigo = codigo + a.code + "\n";
        }
        valorLista = { code: codigo, nodo: nodo };
        this.$ = valorLista;
    
break;
case 3:

        nodo = new Nodo("InstruccionesF");
        codigo = "";
        for(let a of $$[$0]){
            nodo.newHijo(a.nodo);
            codigo = codigo + a.code + "\n";
        }
        valorLista = { code: codigo, nodo: nodo };
        this.$ = valorLista;
    
break;
case 4: case 6: case 82: case 103:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 5: case 7: case 58: case 83: case 95: case 97: case 104: case 165:

        this.$ = [$$[$0]];
    
break;
case 8:

        let nodoi1 = new Nodo("Instruccion");
        nodoi1.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0].code, nodo: nodoi1 };
    
break;
case 9:

        let nodoi2 = new Nodo("Instruccion");
        nodoi2.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0].code, nodo: nodoi2 };
    
break;
case 10:

        let nodoi3 = new Nodo("Instruccion");
        nodoi3.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0].code, nodo: nodoi3 };
    
break;
case 11:

        let nodoi4 = new Nodo("Instruccion");
        nodoi4.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0].code, nodo: nodoi4 };
    
break;
case 12:

        let nodoi5 = new Nodo("Instruccion");
        nodoi5.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0].code, nodo: nodoi5 };
    
break;
case 13:

        let nodoi6 = new Nodo("Instruccion");
        nodoi6.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0].code, nodo: nodoi6 };
    
break;
case 14:

        let nodoi7 = new Nodo("Instruccion");
        nodoi7.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0].code, nodo: nodoi7 };
    
break;
case 15: case 16: case 17: case 18: case 19: case 20: case 22: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38:

        nodoi8 = new Nodo("Instruccion");
        nodoi8.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0].code, nodo: nodoi8 };
    
break;
case 21: case 25: case 39: case 40:

        nodoi8 = new Nodo("Instruccion");
        nodoi8.newHijo($$[$0-1].nodo);
        this.$ = { code: $$[$0-1].code+$$[$0], nodo: nodoi8 };
    
break;
case 23: case 24:

        nodoi8 = new Nodo("Instruccion");
        nodoi8.newHijo(new Nodo($$[$0-1]));
        this.$ = { code: $$[$0-1]+$$[$0], nodo: nodoi8 };
    
break;
case 26: case 41:
 
        //errores.push(new Error_(_$[$0-1].first_line, _$[$0-1].first_column, "Sintáctico", "Se esperaba: "+ yytext));
    
break;
case 42:

        node = new Nodo("Imprimir");
        node.newHijo(new Nodo($$[$0-4]));
        nodoLista = new Nodo("ListaExpresion");
        codigo = "";
        for(let a of $$[$0-2]){
            nodoLista.newHijo(a.nodo);
            codigo = codigo + a.code+", ";
        }
        codigo = codigo.slice(0, -2);
        valorLista = { code: codigo, nodo: nodoLista };
        node.newHijo(valorLista.nodo);

        this.$ = { code: $$[$0-4]+$$[$0-3]+valorLista.code+$$[$0-1]+$$[$0], nodo: node };
    
break;
case 43:

        node = new Nodo("GraficarTS");
        node.newHijo(new Nodo($$[$0-3]));
        this.$ = { code: $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0], nodo: node };
    
break;
case 44:

        node = new Nodo("Declaracion");
        node.newHijo(new Nodo($$[$0-7]));
        node.newHijo(new Nodo($$[$0-6]));
        node.newHijo($$[$0-4].nodo);
        tipo = $$[$0-4].tipo;
        if($$[$0-3].tipo != Tipo.NULL){
            node.newHijo($$[$0-3].nodo);
            tipo = $$[$0-3].tipo;
        }
        node.newHijo(new Nodo($$[$0-2]));
        node.newHijo($$[$0-1].nodo);

        this.$ = { code: "let "+$$[$0-6]+$$[$0-5]+$$[$0-4].code+$$[$0-3].code+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: node, tipo: tipo };
    
break;
case 45:

        node = new Nodo("Declaracion");
        node.newHijo(new Nodo($$[$0-5]));
        node.newHijo(new Nodo($$[$0-4]));
        node.newHijo($$[$0-2].nodo);
        tipo = $$[$0-2].tipo;
        if($$[$0-1].tipo != Tipo.NULL){
            node.newHijo($$[$0-1].nodo);
            tipo = $$[$0-1].tipo;
        }
        this.$ = { code: "let "+$$[$0-4]+$$[$0-3]+$$[$0-2].code+$$[$0-1].code+$$[$0], nodo: node, tipo: tipo };
    
break;
case 46:

        node = new Nodo("Declaracion");
        node.newHijo(new Nodo($$[$0-4]));
        node.newHijo(new Nodo($$[$0-3]));
        node.newHijo(new Nodo($$[$0-2]));
        node.newHijo($$[$0-1].nodo);

        this.$ = { code: "let "+$$[$0-3]+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: node, tipo: $$[$0-1].tipo };
    
break;
case 47:

        node = new Nodo("Declaracion");
        node.newHijo(new Nodo($$[$0-2]));
        node.newHijo(new Nodo($$[$0-1]));

        this.$ = { code: "let "+$$[$0-1]+$$[$0], nodo: node, tipo: Tipo.NULL };
    
break;
case 48:

        node = new Nodo("Declaracion");
        node.newHijo(new Nodo($$[$0-7]));
        node.newHijo(new Nodo($$[$0-6]));
        node.newHijo($$[$0-4].nodo);
        tipo = $$[$0-4].tipo;
        if($$[$0-3].tipo != Tipo.NULL){
            node.newHijo($$[$0-3].nodo);
            tipo = $$[$0-3].tipo;
        }
        node.newHijo(new Nodo($$[$0-2]));
        node.newHijo($$[$0-1].nodo);
        this.$ = { code: "const "+$$[$0-6]+$$[$0-5]+$$[$0-4].code+$$[$0-3].code+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: node, tipo: tipo };
    
break;
case 49:

        let nodoConst = new Nodo("Declaracion");
        nodoConst.newHijo(new Nodo($$[$0-4]));
        nodoConst.newHijo(new Nodo($$[$0-3]));
        nodoConst.newHijo(new Nodo($$[$0-2]));
        nodoConst.newHijo($$[$0-1].nodo);
        this.$ = { code: "const "+$$[$0-3]+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: nodoConst, tipo: $$[$0-1].tipo };
    
break;
case 50:

        node = new Nodo("Declaracion");
        node.newHijo(new Nodo($$[$0-5]));
        node.newHijo(new Nodo($$[$0-4]));
        node.newHijo($$[$0-2].nodo);
        tipo = $$[$0-2].tipo;
        if($$[$0-1].tipo != Tipo.NULL){
            node.newHijo($$[$0-1].nodo);
            tipo = $$[$0-1].tipo;
        }
        this.$ = { code: "const "+$$[$0-4]+$$[$0-3]+$$[$0-2].code+$$[$0-1].code+$$[$0], nodo: node, tipo: tipo };
    
break;
case 51:

        node = new Nodo("Declaracion");
        node.newHijo(new Nodo($$[$0-2]));
        node.newHijo(new Nodo($$[$0-1]));
        this.$ = { code: "const "+$$[$0-1]+$$[$0], nodo: node, tipo: Tipo.NULL };
    
break;
case 52:

        node = new Nodo("Asignacion");
        node.newHijo(new Nodo($$[$0-3]));
        node.newHijo(new Nodo($$[$0-2]));
        node.newHijo($$[$0-1].nodo);

        this.$ = { code: $$[$0-3]+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: node, tipo: $$[$0-1].tipo };
    
break;
case 53: case 54:

        node = new Nodo("Asignacion");
        node.newHijo(new Nodo($$[$0-2]));
        node.newHijo(new Nodo($$[$0-1]));

        this.$ = { code: $$[$0-2]+$$[$0-1]+$$[$0], nodo: node, tipo: Tipo.NUMBER };
    
break;
case 55:

        node2 = new Nodo("AccesosA");
        tipo = $$[$0-3][0].tipo;
        codigo = "";
        for(let a of $$[$0-3]){
            node2.newHijo(a.nodo);
            codigo = codigo+a.code;
        }

        node = new Nodo("Asignacion");
        node.newHijo(node2);
        node.newHijo(new Nodo($$[$0-2]));
        node.newHijo($$[$0-1].nodo);

        this.$ = { code: codigo+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: node, tipo: tipo };
    
break;
case 56:

        nodo = new Nodo("AccesoType");
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo(new Nodo($$[$0]));
        $$[$0-2].push({code: $$[$0-1]+$$[$0], nodo: nodo, tipo: 5});
        this.$ = $$[$0-2];
    
break;
case 57:

        nodo = new Nodo("AccesoArray");
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo($$[$0-1].nodo);
        nodo.newHijo(new Nodo($$[$0]));
        $$[$0-3].push({code: $$[$0-2]+$$[$0-1].code+$$[$0], nodo: nodo, tipo: 4});
        this.$ = $$[$0-3];
    
break;
case 59:

        nodo = new Nodo("AccesoType");
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-2]+$$[$0-1]+$$[$0], nodo: nodo, tipo: 5};
    
break;
case 60:

        nodo = new Nodo("AccesoArray");
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo($$[$0-1].nodo);
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-3]+$$[$0-2]+$$[$0-1].code+$$[$0], nodo:nodo, tipo: 4};
    
break;
case 61:

        nodo = new Nodo("If");
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo($$[$0-3].nodo);
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo($$[$0-1].nodo);
        if($$[$0].nodo != null){
            nodo.newHijo($$[$0].nodo);
        }
        this.$ = {code: $$[$0-5]+$$[$0-4]+$$[$0-3].code+$$[$0-2]+$$[$0-1].code+$$[$0].code, nodo:nodo};
    
break;
case 62:

        nodo = new Nodo("Else");
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);

        this.$ = {code: $$[$0-1]+$$[$0].code, nodo:nodo};
    
break;
case 63:

        nodo = new Nodo("Else If");
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);

        this.$ = {code: $$[$0-1]+" "+$$[$0].code, nodo:nodo};
    
break;
case 64:

        this.$ = {code: "", nodo:null};
    
break;
case 65:

        nodo = new Nodo("While");
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-4]+$$[$0-3]+$$[$0-2].code+$$[$0-1]+$$[$0].code, nodo:nodo};
    
break;
case 66:

        nodo = new Nodo("Do While");
        nodo.newHijo(new Nodo($$[$0-6]));
        nodo.newHijo($$[$0-5].nodo);
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo($$[$0-1]));
        this.$ = {code: $$[$0-6]+$$[$0-5].code+$$[$0-4]+$$[$0-3]+$$[$0-2].code+$$[$0-1]+$$[$0], nodo:nodo};
    
break;
case 67:

        nodo = new Nodo("Cuerpo");
        nodo.newHijo($$[$0-1].nodo);

        this.$ = {code: $$[$0-2]+"\n\t"+$$[$0-1].code+$$[$0], nodo:nodo};
    
break;
case 68:

        nodo = new Nodo("Cuerpo");
        this.$ = {code: $$[$0-1]+$$[$0], nodo:nodo};
    
break;
case 69:

        nodo = new Nodo("Cuerpo Funcion");
        nodo.newHijo($$[$0-1].nodo);

        this.$ = {code: $$[$0-2]+"\n\t"+$$[$0-1].code+$$[$0], nodo:nodo};
    
break;
case 70:

        nodo = new Nodo("Cuerpo Funcion");
        this.$ = {code: $$[$0-1]+$$[$0], nodo:nodo};
    
break;
case 71:

        nodo = new Nodo("For");
        nodo.newHijo(new Nodo($$[$0-7]));
        nodo.newHijo(new Nodo($$[$0-6]));
        nodo.newHijo($$[$0-5].nodo);
        nodo.newHijo($$[$0-4].nodo);
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-7]+$$[$0-6]+$$[$0-5].code+" "+$$[$0-4].code +" "+$$[$0-3]+ $$[$0-2].code +$$[$0-1]+$$[$0].code, nodo:nodo};
    
break;
case 72:

        nodo = new Nodo("ForIn");
        nodo.newHijo(new Nodo($$[$0-6]));
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-6]+$$[$0-5]+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2].code+" "+$$[$0-1]+$$[$0].code, nodo:nodo};
    
break;
case 73:

        nodo = new Nodo("ForIn");
        nodo.newHijo(new Nodo($$[$0-7]));
        nodo.newHijo(new Nodo($$[$0-6]));
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-7]+$$[$0-6]+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2].code+$$[$0-1]+$$[$0].code, nodo:nodo};
    
break;
case 74:

        nodo = new Nodo("ForOf");
        nodo.newHijo(new Nodo($$[$0-6]));
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-6]+$$[$0-5]+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2].code+$$[$0-1]+$$[$0].code, nodo:nodo};
    
break;
case 75:

        nodo = new Nodo("ForOf");
        nodo.newHijo(new Nodo($$[$0-7]));
        nodo.newHijo(new Nodo($$[$0-6]));
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-7]+$$[$0-6]+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2].code+$$[$0-1]+$$[$0].code, nodo:nodo};
    
break;
case 76:

        nodo = new Nodo("AsignacionFor");
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-2]+$$[$0-1]+$$[$0].code, nodo:nodo};
    
break;
case 77: case 78:

        nodo = new Nodo("AsignacionFor");
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-1]+$$[$0], nodo:nodo};
    
break;
case 81:

        nodo = new Nodo("Switch");
        nodo.newHijo(new Nodo($$[$0-6]));
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo($$[$0-4].nodo);
        nodo.newHijo(new Nodo($$[$0-3]));

        node = new Nodo("Cases");
        codigo = "";
        for(let a of $$[$0-1]){
            node.newHijo(a.nodo);
            codigo = codigo + a.code + "\n";
        }
        nodo.newHijo(node);

        this.$ = {code: $$[$0-6]+$$[$0-5]+$$[$0-4].code+$$[$0-3]+$$[$0-2]+"\n\t"+codigo+$$[$0], nodo:nodo};
    
break;
case 84:

        nodo = new Nodo("Caso");
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo($$[$0-1]));
        if($$[$0].nodo != null){
            nodo.newHijo($$[$0].nodo);
        }
        this.$ = {code: $$[$0-3]+" "+$$[$0-2].code+$$[$0-1]+"\n\t"+$$[$0].code, nodo:nodo};
    
break;
case 85:

        nodo = new Nodo("Default");
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo(new Nodo($$[$0-1]));
        if($$[$0].nodo != null){
            nodo.newHijo($$[$0].nodo);
        }
        this.$ = {code: $$[$0-2]+" "+$$[$0-1]+"\n\t"+$$[$0].code, nodo:nodo};
    
break;
case 86: case 121: case 143: case 150: case 151: case 152: case 155:

        this.$ = $$[$0];
    
break;
case 87:

        this.$ = {nodo: null, code: ""};
    
break;
case 88:

        nodo = new Nodo("Funcion");
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo(new Nodo($$[$0-2]));
        if($$[$0-1].nodo != null){
            nodo.newHijo($$[$0-1].nodo);
        }
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-5]+" "+$$[$0-4]+$$[$0-3]+$$[$0-2] + $$[$0-1].code + $$[$0].code , nodo:nodo, tipo: $$[$0-1].tipo};
    
break;
case 89:

        nodo = new Nodo("Funcion");
        nodo.newHijo(new Nodo($$[$0-6]));
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo(new Nodo($$[$0-4]));
        
        //Parametros
        node = new Nodo("Parametros");
        codigo = "";
        for(let a of $$[$0-3]){
            node.newHijo(a.nodo);
            codigo = codigo + a.code + ", ";
        }
        nodo.newHijo(node);
        codigo = codigo.slice(0, -2);

        nodo.newHijo(new Nodo($$[$0-2]));
        if($$[$0-1].nodo != null){
            nodo.newHijo($$[$0-1].nodo);
        }
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-6]+" "+$$[$0-5]+$$[$0-4]+codigo + $$[$0-2] + $$[$0-1].code +$$[$0].code, nodo:nodo, tipo: $$[$0-1].tipo};
    
break;
case 90:

        nodo = new Nodo("TipoFuncion");
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-1]+$$[$0].code, nodo: nodo, tipo: $$[$0].tipo};
    
break;
case 91:

        this.$ = {code: "", nodo: null, tipo:Tipo.ANY};
    
break;
case 92:

        nodo = new Nodo("Call Funcion");
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-2]+$$[$0-1]+$$[$0], nodo: nodo, tipo: Tipo.NULL};
    
break;
case 93:

        nodo = new Nodo("Call Funcion");
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo(new Nodo($$[$0-2]));
        //Lista Expresion
        nodoLista = new Nodo("ListaExpresion");
        codigo = "";
        for(let a of $$[$0-1]){
            nodoLista.newHijo(a.nodo);
            codigo = codigo + a.code+", ";
        }
        codigo = codigo.slice(0, -2);
        nodo.newHijo(nodoLista);
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-3]+$$[$0-2]+codigo+$$[$0], nodo: nodo, tipo: Tipo.NULL};
    
break;
case 94: case 96: case 164:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 98:

        nodo = new Nodo("Parametro");
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo($$[$0-1].nodo);
        nodo.newHijo($$[$0].nodo);
        tipo = $$[$0-1].tipo;
        if($$[$0].tipo != Tipo.NULL){
            tipo = $$[$0].tipo;
        }
        this.$ = {code: $$[$0-3]+" "+$$[$0-2]+$$[$0-1].code+$$[$0].code, nodo: nodo, tipo: tipo};
    
break;
case 99:

        nodo = new Nodo("Parametro");
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0], nodo: nodo, tipo: Tipo.ANY};
    
break;
case 100:

        nodo = new Nodo("Return");
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo($$[$0].nodo);
        this.$ = {code: $$[$0-1]+" "+$$[$0].code, nodo: nodo};
    
break;
case 101:

        nodo = new Nodo("Return");
        this.$ = {code: $$[$0], nodo: nodo};
    
break;
case 102:

        nodo = new Nodo("Type");
        nodo.newHijo(new Nodo($$[$0-6]));
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo(new Nodo($$[$0-4]));
        //Lista Atributos
        nodoLista = new Nodo("ListaAtributos");
        codigo = "";
        for(let a of $$[$0-2]){
            nodoLista.newHijo(a.nodo);
            codigo = codigo + a.code;
        }
        nodo.newHijo(nodoLista);
        this.$ = {code: $$[$0-6]+" "+$$[$0-5]+$$[$0-4]+$$[$0-3]+"\n\t"+codigo+$$[$0-1]+$$[$0], nodo: nodo, tipo: Tipo.TYPE};
    
break;
case 105:

        nodo = new Nodo("Atributo");
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo($$[$0-1].nodo);
        this.$ = {code: $$[$0-4]+" "+$$[$0-3]+$$[$0-2].code+$$[$0-1].code+$$[$0].code+"\n", nodo: nodo, tipo: $$[$0-2].tipo};
    
break;
case 106: case 107:

        this.$ = { code: $$[$0] };
    
break;
case 108:

        this.$ = { code: '' };
    
break;
case 111:

        node = new Nodo("Tipo");
        node.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0], nodo: node, tipo: Tipo.NUMBER};
    
break;
case 112:

        node = new Nodo("Tipo");
        node.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0], nodo: node, tipo: Tipo.STRING};
    
break;
case 113:

        node = new Nodo("Tipo");
        node.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0], nodo: node, tipo: Tipo.BOOLEAN};
    
break;
case 114:

        node = new Nodo("Tipo");
        node.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0], nodo: node, tipo: Tipo.NULL};
    
break;
case 115: case 117:

        node = new Nodo("Tipo");
        node.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0], nodo: node, tipo: Tipo.TYPE};
    
break;
case 116:

        node = new Nodo("Tipo");
        node.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0], nodo: node, tipo: Tipo.VOID};
    
break;
case 118:

        node = new Nodo("Dimensiones");
        codigo = "";
        for(let i = 0; i<$$[$0]; i++){
            codigo = codigo + "[]";
        }
        node.newHijo(new Nodo(codigo));
        this.$ = {code: codigo, nodo: node, tipo: Tipo.ARRAY};
    
break;
case 119:

        this.$ = {code: "", nodo: null, tipo: Tipo.NULL};
    
break;
case 120:

        this.$ = $$[$0-1] + $$[$0];
    
break;
case 122:

        this.$ = 1;
    
break;
case 123:

        let nodo26 = new Nodo("Expresion");
        nodo26.newHijo($$[$0-2].nodo);
        nodo26.newHijo(new Nodo($$[$0-1]));
        nodo26.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo26, tipo: Tipo.STRING };
    
break;
case 124:

        let nodo25 = new Nodo("Expresion");
        nodo25.newHijo($$[$0-2].nodo);
        nodo25.newHijo(new Nodo($$[$0-1]));
        nodo25.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo25, tipo: Tipo.NUMBER };

    
break;
case 125:
 
        let nodo24 = new Nodo("Expresion");
        nodo24.newHijo($$[$0-2].nodo);
        nodo24.newHijo(new Nodo($$[$0-1]));
        nodo24.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo24, tipo: Tipo.NUMBER };

    
break;
case 126:

        let nodo23 = new Nodo("Expresion");
        nodo23.newHijo($$[$0-2].nodo);
        nodo23.newHijo(new Nodo($$[$0-1]));
        nodo23.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo23, tipo: Tipo.NUMBER };
    
break;
case 127:

        let nodo22 = new Nodo("Expresion");
        nodo22.newHijo($$[$0-2].nodo);
        nodo22.newHijo(new Nodo($$[$0-1]));
        nodo22.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo22, tipo: Tipo.NUMBER };

    
break;
case 128:

        let nodo21 = new Nodo("Expresion");
        nodo21.newHijo($$[$0-2].nodo);
        nodo21.newHijo(new Nodo($$[$0-1]));
        nodo21.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo21, tipo: Tipo.NUMBER };

    
break;
case 129:

        let nodo20 = new Nodo("Expresion");
        nodo20.newHijo(new Nodo($$[$0-1]));
        nodo20.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-1]+$$[$0].code, nodo: nodo20, tipo: $$[$0].tipo };
    
break;
case 130:

        let nodo19 = new Nodo("Expresion");
        nodo19.newHijo(new Nodo($$[$0-1]));
        nodo19.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-1]+$$[$0].code, nodo: nodo19, tipo: $$[$0].tipo };
    
break;
case 131:

        let nodo18 = new Nodo("Expresion");
        nodo18.newHijo($$[$0-1].nodo);
        nodo18.newHijo(new Nodo($$[$0]));

        this.$ = { code: $$[$0-1].code+$$[$0], nodo: nodo18, tipo: $$[$0-1].tipo };
    
break;
case 132:

        let nodo17 = new Nodo("Expresion");
        nodo17.newHijo($$[$0-1].nodo);
        nodo17.newHijo(new Nodo($$[$0]));

        this.$ = { code: $$[$0-1].code+$$[$0], nodo: nodo17, tipo: $$[$0-1].tipo };
    
break;
case 133:

        let nodo16 = new Nodo("Expresion");
        nodo16.newHijo(new Nodo($$[$0-1]));
        nodo16.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-1]+ $$[$0].code, nodo: nodo16, tipo: Tipo.BOOLEAN };
    
break;
case 134:

        let nodo15 = new Nodo("Expresion");
        nodo15.newHijo($$[$0-2].nodo);
        nodo15.newHijo(new Nodo('\>'));
        nodo15.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo15, tipo: Tipo.BOOLEAN };
    
break;
case 135:

        let nodo14 = new Nodo("Expresion");
        nodo14.newHijo($$[$0-2].nodo);
        nodo14.newHijo(new Nodo('\<'));
        nodo14.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo14, tipo: Tipo.BOOLEAN };
    
break;
case 136:

        let nodo13 = new Nodo("Expresion");
        nodo13.newHijo($$[$0-2].nodo);
        nodo13.newHijo(new Nodo('\>='));
        nodo13.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo13, tipo: Tipo.BOOLEAN };
    
break;
case 137:

        nodo = new Nodo("Expresion");
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo('\<='));
        nodo.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo, tipo: Tipo.BOOLEAN };
    
break;
case 138:

        let nodo12 = new Nodo("Expresion");
        nodo12.newHijo($$[$0-2].nodo);
        nodo12.newHijo(new Nodo('=='));
        nodo12.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo12, tipo: Tipo.BOOLEAN };
    
break;
case 139:

        let nodo11 = new Nodo("Expresion");
        nodo11.newHijo($$[$0-2].nodo);
        nodo11.newHijo(new Nodo('!='));
        nodo11.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo11, tipo: Tipo.BOOLEAN };
    
break;
case 140:

        let nodo10 = new Nodo("Expresion");
        nodo10.newHijo($$[$0-2].nodo);
        nodo10.newHijo(new Nodo($$[$0-1]));
        nodo10.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo10, tipo: Tipo.NULL };
    
break;
case 141:

        let nodo9 = new Nodo("Expresion");
        nodo9.newHijo($$[$0-2].nodo);
        nodo9.newHijo(new Nodo($$[$0-1]));
        nodo9.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo9, tipo: Tipo.NULL };
    
break;
case 142:

        let nodo8 = new Nodo("Expresion");
        nodo8.newHijo($$[$0-4].nodo);
        nodo8.newHijo(new Nodo($$[$0-3]));
        nodo8.newHijo($$[$0-2].nodo);
        nodo8.newHijo(new Nodo($$[$0-1]));
        nodo8.newHijo($$[$0].nodo);
        this.$ = { code: $$[$0-4].code+$$[$0-3]+$$[$0-2].code+$$[$0-1]+$$[$0].code, nodo: nodo8, tipo: Tipo.NULL };
    
break;
case 144:
 
        let nodo7 = new Nodo("Expresion");
        nodo7.newHijo($$[$0-1].nodo);
        this.$ = { code: $$[$0-2]+$$[$0-1].code+$$[$0], nodo: nodo7, tipo: $$[$0-1].tipo };
    
break;
case 145:
 
        let nodo6 = new Nodo($$[$0]);
        this.$ = { code: $$[$0], nodo: nodo6, tipo: Tipo.NUMBER };
    
break;
case 146:

        let nodo05 = new Nodo($$[$0]);
        this.$ = { code: $$[$0], nodo: nodo05, tipo: Tipo.BOOLEAN };
    
break;
case 147:

        let nodo5 = new Nodo($$[$0]);
        this.$ = { code: $$[$0], nodo: nodo5, tipo: Tipo.NULL };
    
break;
case 148:

        let nodo4 = new Nodo($$[$0]);
        this.$ = { code: $$[$0], nodo: nodo4, tipo: Tipo.STRING };
    
break;
case 149:

        let nodo2 = new Nodo($$[$0]);
        this.$ = { code: $$[$0], nodo: nodo2, tipo: Tipo.NULL };
    
break;
case 153:
 //DONE
        this.$ = $$[$0];
    
break;
case 154:

        nodo = new Nodo("Acceso Type");
        nodo.newHijo($$[$0-2].nodo);
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-2].code+$$[$0-1]+$$[$0], nodo: nodo, tipo: Tipo.TYPE};
    
break;
case 156:
 
        nodo = new Nodo("Acceso Array");
        nodo.newHijo($$[$0-3].nodo);
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo($$[$0-1].nodo);
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-3].code+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: nodo, tipo: Tipo.ARRAY};
    
break;
case 157:

        nodo = new Nodo("Acceso Push");
        nodo.newHijo($$[$0-5].nodo);
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo($$[$0-1].nodo);
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-5].code+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: nodo, tipo: Tipo.NUMBER};
    
break;
case 158:

        nodo = new Nodo("Acceso Pop");
        nodo.newHijo($$[$0-4].nodo);
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-4].code+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0], nodo: nodo, tipo: $$[$0-4].tipo};
    
break;
case 159:

        nodo = new Nodo("Acceso Type");
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-2]+$$[$0-1]+$$[$0], nodo: nodo, tipo: Tipo.TYPE};
    
break;
case 160:

        nodo = new Nodo("Acceso Array");
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo($$[$0-1].nodo);
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-3]+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: nodo, tipo: Tipo.ARRAY};
    
break;
case 161:

        nodo = new Nodo("Acceso Push");
        nodo.newHijo(new Nodo($$[$0-5]));
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo($$[$0-1].nodo);
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1].code+$$[$0], nodo: nodo, tipo: Tipo.NUMBER};
    
break;
case 162:

        nodo = new Nodo("Acceso Pop");
        nodo.newHijo(new Nodo($$[$0-4]));
        nodo.newHijo(new Nodo($$[$0-3]));
        nodo.newHijo(new Nodo($$[$0-2]));
        nodo.newHijo(new Nodo($$[$0-1]));
        nodo.newHijo(new Nodo($$[$0]));
        this.$ = {code: $$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0], nodo: nodo, tipo: Tipo.ARRAY};
    
break;
case 163:

        nodo = new Nodo("Call Type");
        //Lista Atributos
        nodoLista = new Nodo("Lista Atributos");
        codigo = "";
        for(let a of $$[$0-1]){
            nodoLista.newHijo(a.nodo);
            codigo = codigo + a.code + ", ";
        }
        codigo = codigo.slice(0, -2);
        nodo.newHijo(nodoLista);
        this.$ = {code: $$[$0-2]+codigo+$$[$0], nodo: nodo, tipo: Tipo.TYPE};
    
break;
case 166:

        let nodo3 = new Nodo('AtributoExp');
        nodo3.newHijo(new Nodo($$[$0-2]));
        nodo3.newHijo(new Nodo($$[$0-1]));
        nodo3.newHijo($$[$0].nodo);

        this.$ = { code: $$[$0-2]+$$[$0-1]+$$[$0].code, nodo: nodo3 };
    
break;
case 167:

        node = new Nodo('valorArray');
        nodoLista = new Nodo("ListaExpresion");
        codigo = "";
        for(let a of $$[$0-1]){
            nodoLista.newHijo(a.nodo);
            codigo = codigo + a.code + ", ";
        }
        codigo = codigo.slice(0, -2);

        valorLista = { code: codigo, nodo: nodoLista, tipo: Tipo.ARRAY };
        node.newHijo(valorLista.nodo);

        this.$ = { code: "["+valorLista.code+"]", nodo: node, tipo: Tipo.ARRAY };
    
break;
case 168:

        node = new Nodo('valorArray');
        node.newHijo(new Nodo('[ ]'));

        this.$ = { code: "[]", nodo: node, tipo: Tipo.ARRAY };
    
break;
}
},
table: [{2:$V0,3:1,4:2,9:3,11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,26:18,27:$V1,28:$V2,29:21,31:$V3,35:$V4,36:$V5,37:$V6,43:$V7,46:28,50:38,51:$V8,54:$V9,55:$Va,56:$Vb,59:$Vc,64:$Vd,70:$Ve,75:$Vf,76:$Vg},{1:[3]},{2:$V0,5:[1,39],9:40,11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,26:18,27:$V1,28:$V2,29:21,31:$V3,35:$V4,36:$V5,37:$V6,43:$V7,46:28,50:38,51:$V8,54:$V9,55:$Va,56:$Vb,59:$Vc,64:$Vd,70:$Ve,75:$Vf,76:$Vg},o($Vh,[2,5]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),{25:[1,41]},o($Vh,[2,22]),{25:[1,42]},{25:[1,43]},{25:[1,44]},o($Vh,$Vi,{30:45,25:$Vj}),{32:[1,47]},{32:[1,48]},{37:[1,49]},{37:[1,50]},{32:$Vk,41:$Vl,44:$Vm,45:$Vn,47:$Vo,48:$Vp},{41:[1,57],47:[1,58],48:[1,59]},{32:[1,60]},{2:$V0,4:63,6:61,9:3,11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,26:18,27:$V1,28:$V2,29:21,31:$V3,35:$V4,36:$V5,37:$V6,43:$V7,46:28,50:38,51:$V8,54:$V9,55:$Va,56:$Vb,57:[1,62],59:$Vc,64:$Vd,70:$Ve,75:$Vf,76:$Vg},{32:[1,64]},{16:65,56:$Vb},{32:[1,66]},{32:[1,67]},{37:[1,68]},{37:[1,69]},{24:81,25:[2,101],32:$Vq,37:$Vr,42:70,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($VB,[2,58]),{1:[2,1]},o($Vh,[2,4]),o($Vh,[2,21]),o($Vh,[2,23]),o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,109]),{24:81,32:$Vq,33:88,37:$Vr,42:89,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{34:[1,90]},{25:$VC,38:$VD,41:$VE},{25:[1,96],38:[1,94],41:[1,95]},{24:81,32:$Vq,37:$Vr,42:97,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{25:[1,98]},{25:[1,99]},{24:81,32:$Vq,33:101,34:[1,100],37:$Vr,42:89,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{37:[1,102]},{24:81,32:$Vq,37:$Vr,42:103,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:104,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{37:[1,105]},{24:81,32:$Vq,37:$Vr,42:106,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:107,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{57:[1,108]},o($VF,[2,68]),o($VG,[2,2],{11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,26:18,29:21,46:28,50:38,9:40,2:$V0,27:$V1,28:$V2,31:$V3,35:$V4,36:$V5,37:$V6,43:$V7,51:$V8,54:$V9,55:$Va,56:$Vb,59:$Vc,64:$Vd,70:$Ve,75:$Vf,76:$Vg}),{24:81,32:$Vq,37:$Vr,42:109,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{54:[1,110]},{13:114,14:115,36:[1,113],37:[1,112],43:$V7,46:28,50:38,60:111},{24:81,32:$Vq,37:$Vr,42:116,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{32:[1,117]},{41:[1,118]},{25:[2,100],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{24:81,32:$Vq,37:$Vr,42:136,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:137,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:138,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($VY,[2,143]),{24:81,32:$Vq,37:$Vr,42:139,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($VY,[2,145]),o($VY,[2,146]),o($VY,[2,147]),o($VY,[2,148]),o($VY,[2,149],{32:$Vk,47:[1,140],48:[1,141]}),o($VY,[2,150]),o($VY,[2,151]),o($VY,[2,152],{47:[1,142],48:[1,143]}),o($VY,[2,153]),{37:$VZ,113:144,114:145},o($V_,[2,155]),{24:81,32:$Vq,33:147,37:$Vr,42:89,48:$Vs,49:[1,148],56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{34:[1,149],73:$V$},o($V01,[2,95],{44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX}),{25:[1,151]},{37:$V11,39:152,76:$V21,80:$V31,81:$V41,82:$V51,83:$V61,84:$V71},{24:81,32:$Vq,37:$Vr,42:160,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($V81,[2,47]),{37:$V11,39:161,76:$V21,80:$V31,81:$V41,82:$V51,83:$V61,84:$V71},{24:81,32:$Vq,37:$Vr,42:162,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($V81,[2,51]),{25:[1,163],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($V81,[2,53]),o($V81,[2,54]),o($VY,[2,92]),{34:[1,164],73:$V$},o($VB,[2,59]),{44:$VH,45:$VI,49:[1,165],87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{25:[1,166],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($VB,[2,56]),{44:$VH,45:$VI,49:[1,167],87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{34:[1,168],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($VF,[2,67]),{34:[1,169],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{32:[1,170]},{24:81,32:$Vq,37:$Vr,42:171,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{41:$Vl,44:$Vm,45:$Vn,47:$Vo,48:$Vp,62:[1,172],63:[1,173]},{37:[1,174]},o($V91,[2,79]),o($V91,[2,80]),{34:[1,175],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{34:[1,176],37:$Va1,72:177,74:178},{56:[1,180]},{24:81,32:$Vq,37:$Vr,42:181,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:182,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:183,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:184,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:185,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:186,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($VY,[2,131]),o($VY,[2,132]),{24:81,32:$Vq,37:$Vr,42:187,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:188,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:189,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:190,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:191,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:192,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:193,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:194,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:195,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($VY,[2,129]),o($VY,[2,130]),o($VY,[2,133]),{34:[1,196],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{37:[1,197],111:[1,198],112:[1,199]},{24:81,32:$Vq,37:$Vr,42:200,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{37:[1,201],111:[1,202],112:[1,203]},{24:81,32:$Vq,37:$Vr,42:204,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{57:[1,205],73:[1,206]},o($Vb1,[2,165]),{38:[1,207]},{49:[1,208],73:$V$},o($VY,[2,168]),{25:[1,209]},{24:81,32:$Vq,37:$Vr,42:210,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($Vh,[2,43]),o($Vc1,$Vd1,{40:211,85:212,86:213,48:$Ve1}),o($Vf1,[2,111]),o($Vf1,[2,112]),o($Vf1,[2,113]),o($Vf1,[2,114]),o($Vf1,[2,115]),o($Vf1,[2,116]),o($Vf1,[2,117]),{25:[1,215],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($Vc1,$Vd1,{85:212,86:213,40:216,48:$Ve1}),{25:[1,217],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($V81,[2,52]),o($VY,[2,93]),o($VB,[2,60]),o($V81,[2,55]),o($VB,[2,57]),{16:218,56:$Vb},{16:219,56:$Vb},{24:81,32:$Vq,37:$Vr,42:220,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{25:[1,221],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{24:81,32:$Vq,37:$Vr,42:222,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:223,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{25:$VC,38:$VD,41:$VE,62:[1,224],63:[1,225]},{56:[1,226]},{38:$Vg1,56:$Vh1,71:227},{34:[1,229],73:[1,230]},o($Vi1,[2,97]),o($Vi1,[2,99],{38:[1,231]}),{37:$Vj1,77:232,78:233},o($Vk1,[2,123],{89:$VL,90:$VM,91:$VN,92:$VO}),o($Vk1,[2,124],{89:$VL,90:$VM,91:$VN,92:$VO}),o($Vl1,[2,125],{92:$VO}),o($Vl1,[2,126],{92:$VO}),o($Vl1,[2,127],{92:$VO}),o($Vl1,[2,128],{92:$VO}),o($Vm1,[2,134],{87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO}),o($Vm1,[2,135],{87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO}),o($Vm1,[2,136],{87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO}),o($Vm1,[2,137],{87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO}),o($Vn1,[2,138],{87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),o($Vn1,[2,139],{87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS}),o([25,34,38,44,45,49,57,73,100,101],[2,140],{87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,102:$VX}),o([25,34,38,44,45,49,57,73,101],[2,141],{87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,102:$VX}),{38:[1,235],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($VY,[2,144]),o($V_,[2,159]),{32:[1,236]},{32:[1,237]},{44:$VH,45:$VI,49:[1,238],87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($V_,[2,154]),{32:[1,239]},{32:[1,240]},{44:$VH,45:$VI,49:[1,241],87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($VY,[2,163]),{37:$VZ,114:242},{24:81,32:$Vq,37:$Vr,42:243,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($VY,[2,167]),o($Vh,[2,42]),o($V01,[2,94],{44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX}),{25:[1,245],41:[1,244]},o([25,34,37,41,57,73],[2,118],{86:246,48:$Ve1}),o($Vo1,[2,121]),{49:[1,247]},o($V81,[2,46]),{25:[1,249],41:[1,248]},o($V81,[2,49]),o($Vh,[2,64],{52:250,53:[1,251]}),o($Vh,[2,65]),{34:[1,252],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{37:[1,254],61:253},{34:[1,255],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{34:[1,256],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{24:81,32:$Vq,37:$Vr,42:257,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:258,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{65:259,66:260,67:$Vp1,69:$Vq1},{56:$Vr1,58:263},{37:$V11,39:265,76:$V21,80:$V31,81:$V41,82:$V51,83:$V61,84:$V71},{38:$Vg1,56:$Vh1,71:266},{37:$Va1,74:267},{37:$V11,39:268,76:$V21,80:$V31,81:$V41,82:$V51,83:$V61,84:$V71},{37:$Vj1,57:[1,269],78:270},o($Vs1,[2,104]),{38:[1,271]},{24:81,32:$Vq,37:$Vr,42:272,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{24:81,32:$Vq,37:$Vr,42:273,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{34:[1,274]},o($V_,[2,160]),{24:81,32:$Vq,37:$Vr,42:275,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{34:[1,276]},o($V_,[2,156]),o($Vb1,[2,164]),o($Vb1,[2,166],{44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX}),{24:81,32:$Vq,37:$Vr,42:277,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($V81,[2,45]),o($Vo1,[2,120]),o($Vo1,[2,122]),{24:81,32:$Vq,37:$Vr,42:278,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},o($V81,[2,50]),o($Vh,[2,61]),{15:280,16:279,51:$V8,56:$Vb},{25:[1,281]},{34:[1,282]},{41:[1,283],44:[1,284],45:[1,285]},{16:286,56:$Vb},{16:287,56:$Vb},{34:[1,288],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{34:[1,289],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{57:[1,290],66:291,67:$Vp1,69:$Vq1},o($VG,[2,83]),{24:81,32:$Vq,37:$Vr,42:292,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{38:[1,293]},o($Vh,[2,88]),{2:$Vt1,7:294,8:296,10:297,11:298,12:299,13:300,14:301,15:302,16:303,17:304,18:305,19:306,20:307,21:308,22:309,24:310,29:311,31:$V3,35:$V4,36:$V5,37:$V6,43:$V7,46:28,50:38,51:$V8,54:$V9,55:$Va,56:$Vb,57:[1,295],59:$Vc,64:$Vd,75:$Vf},{56:[2,90]},{56:$Vr1,58:313},o($Vi1,[2,96]),o($Vi1,$Vd1,{85:212,86:213,40:314,48:$Ve1}),{25:[1,315]},o($Vs1,[2,103]),{37:$V11,39:316,76:$V21,80:$V31,81:$V41,82:$V51,83:$V61,84:$V71},o([25,34,38,44,45,49,57,73,100,101,102],[2,142],{87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU}),{34:[1,317],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($V_,[2,162]),{34:[1,318],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($V_,[2,158]),{25:[1,319],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},{25:[1,320],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($Vh,[2,62]),o($Vh,[2,63]),o($Vh,[2,66]),{16:321,56:$Vb},{24:81,32:$Vq,37:$Vr,42:322,48:$Vs,56:$Vt,83:$Vu,87:$Vv,88:$Vw,93:$Vx,103:74,104:$Vy,105:$Vz,106:$VA,107:82,108:83,109:84,110:86},{34:[2,77]},{34:[2,78]},o($Vh,[2,72]),o($Vh,[2,74]),{16:323,56:$Vb},{16:324,56:$Vb},o($Vh,[2,81]),o($VG,[2,82]),{38:[1,325],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($VG,$Vu1,{9:3,11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,26:18,29:21,46:28,50:38,4:63,68:326,6:327,2:$V0,27:$V1,28:$V2,31:$V3,35:$V4,36:$V5,37:$V6,43:$V7,51:$V8,54:$V9,55:$Va,56:$Vb,59:$Vc,64:$Vd,70:$Ve,75:$Vf,76:$Vg}),{57:[1,328]},o($Vh,[2,70]),{2:$Vt1,10:329,11:298,12:299,13:300,14:301,15:302,16:303,17:304,18:305,19:306,20:307,21:308,22:309,24:310,29:311,31:$V3,35:$V4,36:$V5,37:$V6,43:$V7,46:28,50:38,51:$V8,54:$V9,55:$Va,56:$Vb,57:[2,3],59:$Vc,64:$Vd,75:$Vf},o($Vv1,[2,7]),o($Vv1,[2,27]),o($Vv1,[2,28]),o($Vv1,[2,29]),o($Vv1,[2,30]),o($Vv1,[2,31]),o($Vv1,[2,32]),o($Vv1,[2,33]),o($Vv1,[2,34]),o($Vv1,[2,35]),o($Vv1,[2,36]),o($Vv1,[2,37]),o($Vv1,[2,38]),{25:[1,330]},{25:[1,331]},o($Vv1,$Vi,{30:332,25:$Vj}),o($Vh,[2,89]),o($Vi1,[2,98]),o($Vh,[2,102]),o([25,37,57,73],$Vd1,{85:212,86:213,40:333,48:$Ve1}),o($V_,[2,161]),o($V_,[2,157]),o($V81,[2,44]),o($V81,[2,48]),o($Vh,[2,71]),{34:[2,76],44:$VH,45:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,94:$VP,95:$VQ,96:$VR,97:$VS,98:$VT,99:$VU,100:$VV,101:$VW,102:$VX},o($Vh,[2,73]),o($Vh,[2,75]),o($VG,$Vu1,{9:3,11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,26:18,29:21,46:28,50:38,4:63,6:327,68:334,2:$V0,27:$V1,28:$V2,31:$V3,35:$V4,36:$V5,37:$V6,43:$V7,51:$V8,54:$V9,55:$Va,56:$Vb,59:$Vc,64:$Vd,70:$Ve,75:$Vf,76:$Vg}),o($VG,[2,85]),o($VG,[2,86]),o($Vh,[2,69]),o($Vv1,[2,6]),o($Vv1,[2,39]),o($Vv1,[2,40]),o($Vv1,[2,41]),o($Vs1,[2,108],{79:335,25:[1,336],73:[1,337]}),o($VG,[2,84]),o($Vs1,[2,105]),o($Vs1,[2,106]),o($Vs1,[2,107])],
defaultActions: {39:[2,1],265:[2,90],284:[2,77],285:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {errores} = require ('../Error/Errores');
    const {Error_} = require('../Error/Error');
    const {Nodo} = require('./Nodo');
    const {Tipo, tipoDominante} = require('../Utils/Tipo');
    //Instrucciones
    //nodo
    let node;
    let nodo;
    let node2;
    let nodoi8;
    let codigo;
    let tipo;
    let nodoLista;
    let valorLista;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Se ignoran espacios en blanco */
break;
case 1:// comentario una línea
break;
case 2:// comentario multiples líneas
break;
case 3:return 104;
break;
case 4:return 106;
break;
case 5:return 105;
break;
case 6:return 83;
break;
case 7:return 80
break;
case 8:return 82
break;
case 9:return 81
break;
case 10:return 84
break;
case 11:return 76
break;
case 12:return 111
break;
case 13:return 112
break;
case 14:return "LET";
break;
case 15:return "CONST";
break;
case 16:return 31;
break;
case 17:return 51
break;
case 18:return 53
break;
case 19:return 54
break;
case 20:return 55
break;
case 21:return 27
break;
case 22:return 28
break;
case 23:return 35
break;
case 24:return 59
break;
case 25:return 64
break;
case 26:return 67
break;
case 27:return 69
break;
case 28:return 70
break;
case 29:return 75
break;
case 30:return 76
break;
case 31:return 63
break;
case 32:return 62
break;
case 33:return 44;
break;
case 34:return 45;
break;
case 35:return 87;
break;
case 36:return 88;
break;
case 37:return 92;
break;
case 38:return 89;
break;
case 39:return 90;
break;
case 40:return 91;
break;
case 41:return 97;
break;
case 42:return 96;
break;
case 43:return 95;
break;
case 44:return 94;
break;
case 45:return 98;
break;
case 46:return 99;
break;
case 47:return 41;
break;
case 48:return 101;
break;
case 49:return 100;
break;
case 50:return 93;
break;
case 51:return 32;
break;
case 52:return 34;
break;
case 53:return 56;
break;
case 54:return 57;
break;
case 55:return 48;		
break;
case 56:return 49;
break;
case 57:return 25;
break;
case 58:return 73;
break;
case 59:return 38;
break;
case 60:return 102;
break;
case 61:return 47;
break;
case 62:return 'CINVERTIDA'  
break;
case 63:return 'DOLAR'   
break;
case 64:return 'DINVERT'     
break;
case 65:return 37;
break;
case 66:return 5;
break;
case 67:  
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:((("[^"]*")|('[^']*')|(`[^`]*`))))/,/^(?:((true|false)))/,/^(?:null\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\.log\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:graficar_ts\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:type\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:\.)/,/^(?:`)/,/^(?:\$)/,/^(?:\\)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_ñÑ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = traduccion;
exports.Parser = traduccion.Parser;
exports.parse = function () { return traduccion.parse.apply(traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}